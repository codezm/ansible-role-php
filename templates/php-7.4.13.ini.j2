[PHP]

{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; About php.ini   ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; PHP's initialization file, generally called php.ini, is responsible for{% endraw %}

{% raw %}; configuring many of the aspects of PHP's behavior.{% endraw %}


{% raw %}; PHP attempts to find and load this configuration from a number of locations.{% endraw %}

{% raw %}; The following is a summary of its search order:{% endraw %}

{% raw %}; 1. SAPI module specific location.{% endraw %}

{% raw %}; 2. The PHPRC environment variable. (As of PHP 5.2.0){% endraw %}

{% raw %}; 3. A number of predefined registry keys on Windows (As of PHP 5.2.0){% endraw %}

{% raw %}; 4. Current working directory (except CLI){% endraw %}

{% raw %}; 5. The web server's directory (for SAPI modules), or directory of PHP{% endraw %}

{% raw %}; (otherwise in Windows){% endraw %}

{% raw %}; 6. The directory from the --with-config-file-path compile time option, or the{% endraw %}

{% raw %}; Windows directory (usually C:\windows){% endraw %}

{% raw %}; See the PHP docs for more specific information.{% endraw %}

{% raw %}; http://php.net/configuration.file{% endraw %}


{% raw %}; The syntax of the file is extremely simple.  Whitespace and lines{% endraw %}

{% raw %}; beginning with a semicolon are silently ignored (as you probably guessed).{% endraw %}

{% raw %}; Section headers (e.g. [Foo]) are also silently ignored, even though{% endraw %}

{% raw %}; they might mean something in the future.{% endraw %}


{% raw %}; Directives following the section heading [PATH=/www/mysite] only{% endraw %}

{% raw %}; apply to PHP files in the /www/mysite directory.  Directives{% endraw %}

{% raw %}; following the section heading [HOST=www.example.com] only apply to{% endraw %}

{% raw %}; PHP files served from www.example.com.  Directives set in these{% endraw %}

{% raw %}; special sections cannot be overridden by user-defined INI files or{% endraw %}

{% raw %}; at runtime. Currently, [PATH=] and [HOST=] sections only work under{% endraw %}

{% raw %}; CGI/FastCGI.{% endraw %}

{% raw %}; http://php.net/ini.sections{% endraw %}


{% raw %}; Directives are specified using the following syntax:{% endraw %}

{% raw %}; directive = value{% endraw %}

{% raw %}; Directive names are *case sensitive* - foo=bar is different from FOO=bar.{% endraw %}

{% raw %}; Directives are variables used to configure PHP or PHP extensions.{% endraw %}

{% raw %}; There is no name validation.  If PHP can't find an expected{% endraw %}

{% raw %}; directive because it is not set or is mistyped, a default value will be used.{% endraw %}


{% raw %}; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one{% endraw %}

{% raw %}; of the INI constants (On, Off, True, False, Yes, No and None) or an expression{% endraw %}

{% raw %}; (e.g. E_ALL & ~E_NOTICE), a quoted string ("bar"), or a reference to a{% endraw %}

{% raw %}; previously set variable or directive (e.g. ${foo}){% endraw %}


{% raw %}; Expressions in the INI file are limited to bitwise operators and parentheses:{% endraw %}

{% raw %}; |  bitwise OR{% endraw %}

{% raw %}; ^  bitwise XOR{% endraw %}

{% raw %}; &  bitwise AND{% endraw %}

{% raw %}; ~  bitwise NOT{% endraw %}

{% raw %}; !  boolean NOT{% endraw %}


{% raw %}; Boolean flags can be turned on using the values 1, On, True or Yes.{% endraw %}

{% raw %}; They can be turned off using the values 0, Off, False or No.{% endraw %}


{% raw %}; An empty string can be denoted by simply not writing anything after the equal{% endraw %}

{% raw %}; sign, or by using the None keyword:{% endraw %}


{% raw %}; foo =         ; sets foo to an empty string{% endraw %}

{% raw %}; foo = None    ; sets foo to an empty string{% endraw %}

{% raw %}; foo = "None"  ; sets foo to the string 'None'{% endraw %}


{% raw %}; If you use constants in your value, and these constants belong to a{% endraw %}

{% raw %}; dynamically loaded extension (either a PHP extension or a Zend extension),{% endraw %}

{% raw %}; you may only use these constants *after* the line that loads the extension.{% endraw %}


{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; About this file ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; PHP comes packaged with two INI files. One that is recommended to be used{% endraw %}

{% raw %}; in production environments and one that is recommended to be used in{% endraw %}

{% raw %}; development environments.{% endraw %}


{% raw %}; php.ini-production contains settings which hold security, performance and{% endraw %}

{% raw %}; best practices at its core. But please be aware, these settings may break{% endraw %}

{% raw %}; compatibility with older or less security conscience applications. We{% endraw %}

{% raw %}; recommending using the production ini in production and testing environments.{% endraw %}


{% raw %}; php.ini-development is very similar to its production variant, except it is{% endraw %}

{% raw %}; much more verbose when it comes to errors. We recommend using the{% endraw %}

{% raw %}; development version only in development environments, as errors shown to{% endraw %}

{% raw %}; application users can inadvertently leak otherwise secure information.{% endraw %}


{% raw %}; This is the php.ini-production INI file.{% endraw %}


{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Quick Reference ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; The following are all the settings which are different in either the production{% endraw %}

{% raw %}; or development versions of the INIs with respect to PHP's default behavior.{% endraw %}

{% raw %}; Please see the actual settings later in the document for more details as to why{% endraw %}

{% raw %}; we recommend these changes in PHP's behavior.{% endraw %}


{% raw %}; display_errors{% endraw %}

{% raw %};   Default Value: On{% endraw %}

{% raw %};   Development Value: On{% endraw %}

{% raw %};   Production Value: Off{% endraw %}


{% raw %}; display_startup_errors{% endraw %}

{% raw %};   Default Value: Off{% endraw %}

{% raw %};   Development Value: On{% endraw %}

{% raw %};   Production Value: Off{% endraw %}


{% raw %}; error_reporting{% endraw %}

{% raw %};   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED{% endraw %}

{% raw %};   Development Value: E_ALL{% endraw %}

{% raw %};   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT{% endraw %}


{% raw %}; log_errors{% endraw %}

{% raw %};   Default Value: Off{% endraw %}

{% raw %};   Development Value: On{% endraw %}

{% raw %};   Production Value: On{% endraw %}


{% raw %}; max_input_time{% endraw %}

{% raw %};   Default Value: -1 (Unlimited){% endraw %}

{% raw %};   Development Value: 60 (60 seconds){% endraw %}

{% raw %};   Production Value: 60 (60 seconds){% endraw %}


{% raw %}; output_buffering{% endraw %}

{% raw %};   Default Value: Off{% endraw %}

{% raw %};   Development Value: 4096{% endraw %}

{% raw %};   Production Value: 4096{% endraw %}


{% raw %}; register_argc_argv{% endraw %}

{% raw %};   Default Value: On{% endraw %}

{% raw %};   Development Value: Off{% endraw %}

{% raw %};   Production Value: Off{% endraw %}


{% raw %}; request_order{% endraw %}

{% raw %};   Default Value: None{% endraw %}

{% raw %};   Development Value: "GP"{% endraw %}

{% raw %};   Production Value: "GP"{% endraw %}


{% raw %}; session.gc_divisor{% endraw %}

{% raw %};   Default Value: 100{% endraw %}

{% raw %};   Development Value: 1000{% endraw %}

{% raw %};   Production Value: 1000{% endraw %}


{% raw %}; session.sid_bits_per_character{% endraw %}

{% raw %};   Default Value: 4{% endraw %}

{% raw %};   Development Value: 5{% endraw %}

{% raw %};   Production Value: 5{% endraw %}


{% raw %}; short_open_tag{% endraw %}

{% raw %};   Default Value: On{% endraw %}

{% raw %};   Development Value: Off{% endraw %}

{% raw %};   Production Value: Off{% endraw %}


{% raw %}; variables_order{% endraw %}

{% raw %};   Default Value: "EGPCS"{% endraw %}

{% raw %};   Development Value: "GPCS"{% endraw %}

{% raw %};   Production Value: "GPCS"{% endraw %}


{% raw %};;;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; php.ini Options  ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Name for user-defined php.ini (.htaccess) files. Default is ".user.ini"{% endraw %}

{% raw %};user_ini.filename = ".user.ini"{% endraw %}


{% raw %}; To disable this feature set this option to an empty value{% endraw %}

{% raw %};user_ini.filename ={% endraw %}


{% raw %}; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes){% endraw %}

{% raw %};user_ini.cache_ttl = 300{% endraw %}


{% raw %};;;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Language Options ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; Enable the PHP scripting language engine under Apache.{% endraw %}

{% raw %}; http://php.net/engine{% endraw %}

engine = On

{% raw %}; This directive determines whether or not PHP will recognize code between{% endraw %}

{% raw %}; <? and ?> tags as PHP source which should be processed as such. It is{% endraw %}

{% raw %}; generally recommended that <?php and ?> should be used and that this feature{% endraw %}

{% raw %}; should be disabled, as enabling it may result in issues when generating XML{% endraw %}

{% raw %}; documents, however this remains supported for backward compatibility reasons.{% endraw %}

{% raw %}; Note that this directive does not control the <?= shorthand tag, which can be{% endraw %}

{% raw %}; used regardless of this directive.{% endraw %}

{% raw %}; Default Value: On{% endraw %}

{% raw %}; Development Value: Off{% endraw %}

{% raw %}; Production Value: Off{% endraw %}

{% raw %}; http://php.net/short-open-tag{% endraw %}

short_open_tag = Off

{% raw %}; The number of significant digits displayed in floating point numbers.{% endraw %}

{% raw %}; http://php.net/precision{% endraw %}

precision = 14

{% raw %}; Output buffering is a mechanism for controlling how much output data{% endraw %}

{% raw %}; (excluding headers and cookies) PHP should keep internally before pushing that{% endraw %}

{% raw %}; data to the client. If your application's output exceeds this setting, PHP{% endraw %}

{% raw %}; will send that data in chunks of roughly the size you specify.{% endraw %}

{% raw %}; Turning on this setting and managing its maximum buffer size can yield some{% endraw %}

{% raw %}; interesting side-effects depending on your application and web server.{% endraw %}

{% raw %}; You may be able to send headers and cookies after you've already sent output{% endraw %}

{% raw %}; through print or echo. You also may see performance benefits if your server is{% endraw %}

{% raw %}; emitting less packets due to buffered output versus PHP streaming the output{% endraw %}

{% raw %}; as it gets it. On production servers, 4096 bytes is a good setting for performance{% endraw %}

{% raw %}; reasons.{% endraw %}

{% raw %}; Note: Output buffering can also be controlled via Output Buffering Control{% endraw %}

{% raw %};   functions.{% endraw %}

{% raw %}; Possible Values:{% endraw %}

{% raw %};   On = Enabled and buffer is unlimited. (Use with caution){% endraw %}

{% raw %};   Off = Disabled{% endraw %}

{% raw %};   Integer = Enables the buffer and sets its maximum size in bytes.{% endraw %}

{% raw %}; Note: This directive is hardcoded to Off for the CLI SAPI{% endraw %}

{% raw %}; Default Value: Off{% endraw %}

{% raw %}; Development Value: 4096{% endraw %}

{% raw %}; Production Value: 4096{% endraw %}

{% raw %}; http://php.net/output-buffering{% endraw %}

output_buffering = 4096

{% raw %}; You can redirect all of the output of your scripts to a function.  For{% endraw %}

{% raw %}; example, if you set output_handler to "mb_output_handler", character{% endraw %}

{% raw %}; encoding will be transparently converted to the specified encoding.{% endraw %}

{% raw %}; Setting any output handler automatically turns on output buffering.{% endraw %}

{% raw %}; Note: People who wrote portable scripts should not depend on this ini{% endraw %}

{% raw %};   directive. Instead, explicitly set the output handler using ob_start().{% endraw %}

{% raw %};   Using this ini directive may cause problems unless you know what script{% endraw %}

{% raw %};   is doing.{% endraw %}

{% raw %}; Note: You cannot use both "mb_output_handler" with "ob_iconv_handler"{% endraw %}

{% raw %};   and you cannot use both "ob_gzhandler" and "zlib.output_compression".{% endraw %}

{% raw %}; Note: output_handler must be empty if this is set 'On' !!!!{% endraw %}

{% raw %};   Instead you must use zlib.output_handler.{% endraw %}

{% raw %}; http://php.net/output-handler{% endraw %}

{% raw %};output_handler ={% endraw %}


{% raw %}; URL rewriter function rewrites URL on the fly by using{% endraw %}

{% raw %}; output buffer. You can set target tags by this configuration.{% endraw %}

{% raw %}; "form" tag is special tag. It will add hidden input tag to pass values.{% endraw %}

{% raw %}; Refer to session.trans_sid_tags for usage.{% endraw %}

{% raw %}; Default Value: "form="{% endraw %}

{% raw %}; Development Value: "form="{% endraw %}

{% raw %}; Production Value: "form="{% endraw %}

{% raw %};url_rewriter.tags{% endraw %}


{% raw %}; URL rewriter will not rewrite absolute URL nor form by default. To enable{% endraw %}

{% raw %}; absolute URL rewrite, allowed hosts must be defined at RUNTIME.{% endraw %}

{% raw %}; Refer to session.trans_sid_hosts for more details.{% endraw %}

{% raw %}; Default Value: ""{% endraw %}

{% raw %}; Development Value: ""{% endraw %}

{% raw %}; Production Value: ""{% endraw %}

{% raw %};url_rewriter.hosts{% endraw %}


{% raw %}; Transparent output compression using the zlib library{% endraw %}

{% raw %}; Valid values for this option are 'off', 'on', or a specific buffer size{% endraw %}

{% raw %}; to be used for compression (default is 4KB){% endraw %}

{% raw %}; Note: Resulting chunk size may vary due to nature of compression. PHP{% endraw %}

{% raw %};   outputs chunks that are few hundreds bytes each as a result of{% endraw %}

{% raw %};   compression. If you prefer a larger chunk size for better{% endraw %}

{% raw %};   performance, enable output_buffering in addition.{% endraw %}

{% raw %}; Note: You need to use zlib.output_handler instead of the standard{% endraw %}

{% raw %};   output_handler, or otherwise the output will be corrupted.{% endraw %}

{% raw %}; http://php.net/zlib.output-compression{% endraw %}

zlib.output_compression = Off

{% raw %}; http://php.net/zlib.output-compression-level{% endraw %}

{% raw %};zlib.output_compression_level = -1{% endraw %}


{% raw %}; You cannot specify additional output handlers if zlib.output_compression{% endraw %}

{% raw %}; is activated here. This setting does the same as output_handler but in{% endraw %}

{% raw %}; a different order.{% endraw %}

{% raw %}; http://php.net/zlib.output-handler{% endraw %}

{% raw %};zlib.output_handler ={% endraw %}


{% raw %}; Implicit flush tells PHP to tell the output layer to flush itself{% endraw %}

{% raw %}; automatically after every output block.  This is equivalent to calling the{% endraw %}

{% raw %}; PHP function flush() after each and every call to print() or echo() and each{% endraw %}

{% raw %}; and every HTML block.  Turning this option on has serious performance{% endraw %}

{% raw %}; implications and is generally recommended for debugging purposes only.{% endraw %}

{% raw %}; http://php.net/implicit-flush{% endraw %}

{% raw %}; Note: This directive is hardcoded to On for the CLI SAPI{% endraw %}

implicit_flush = Off

{% raw %}; The unserialize callback function will be called (with the undefined class'{% endraw %}

{% raw %}; name as parameter), if the unserializer finds an undefined class{% endraw %}

{% raw %}; which should be instantiated. A warning appears if the specified function is{% endraw %}

{% raw %}; not defined, or if the function doesn't include/implement the missing class.{% endraw %}

{% raw %}; So only set this entry, if you really want to implement such a{% endraw %}

{% raw %}; callback-function.{% endraw %}

unserialize_callback_func =

{% raw %}; The unserialize_max_depth specifies the default depth limit for unserialized{% endraw %}

{% raw %}; structures. Setting the depth limit too high may result in stack overflows{% endraw %}

{% raw %}; during unserialization. The unserialize_max_depth ini setting can be{% endraw %}

{% raw %}; overridden by the max_depth option on individual unserialize() calls.{% endraw %}

{% raw %}; A value of 0 disables the depth limit.{% endraw %}

{% raw %};unserialize_max_depth = 4096{% endraw %}


{% raw %}; When floats & doubles are serialized, store serialize_precision significant{% endraw %}

{% raw %}; digits after the floating point. The default value ensures that when floats{% endraw %}

{% raw %}; are decoded with unserialize, the data will remain the same.{% endraw %}

{% raw %}; The value is also used for json_encode when encoding double values.{% endraw %}

{% raw %}; If -1 is used, then dtoa mode 0 is used which automatically select the best{% endraw %}

{% raw %}; precision.{% endraw %}

serialize_precision = -1

{% raw %}; open_basedir, if set, limits all file operations to the defined directory{% endraw %}

{% raw %}; and below.  This directive makes most sense if used in a per-directory{% endraw %}

{% raw %}; or per-virtualhost web server configuration file.{% endraw %}

{% raw %}; Note: disables the realpath cache{% endraw %}

{% raw %}; http://php.net/open-basedir{% endraw %}

{% raw %};open_basedir ={% endraw %}


{% raw %}; This directive allows you to disable certain functions.{% endraw %}

{% raw %}; It receives a comma-delimited list of function names.{% endraw %}

{% raw %}; http://php.net/disable-functions{% endraw %}

disable_functions =

{% raw %}; This directive allows you to disable certain classes.{% endraw %}

{% raw %}; It receives a comma-delimited list of class names.{% endraw %}

{% raw %}; http://php.net/disable-classes{% endraw %}

disable_classes =

{% raw %}; Colors for Syntax Highlighting mode.  Anything that's acceptable in{% endraw %}

{% raw %}; <span style="color: ???????"> would work.{% endraw %}

{% raw %}; http://php.net/syntax-highlighting{% endraw %}

{% raw %};highlight.string  = #DD0000{% endraw %}

{% raw %};highlight.comment = #FF9900{% endraw %}

{% raw %};highlight.keyword = #007700{% endraw %}

{% raw %};highlight.default = #0000BB{% endraw %}

{% raw %};highlight.html    = #000000{% endraw %}


{% raw %}; If enabled, the request will be allowed to complete even if the user aborts{% endraw %}

{% raw %}; the request. Consider enabling it if executing long requests, which may end up{% endraw %}

{% raw %}; being interrupted by the user or a browser timing out. PHP's default behavior{% endraw %}

{% raw %}; is to disable this feature.{% endraw %}

{% raw %}; http://php.net/ignore-user-abort{% endraw %}

{% raw %};ignore_user_abort = On{% endraw %}


{% raw %}; Determines the size of the realpath cache to be used by PHP. This value should{% endraw %}

{% raw %}; be increased on systems where PHP opens many files to reflect the quantity of{% endraw %}

{% raw %}; the file operations performed.{% endraw %}

{% raw %}; Note: if open_basedir is set, the cache is disabled{% endraw %}

{% raw %}; http://php.net/realpath-cache-size{% endraw %}

{% raw %};realpath_cache_size = 4096k{% endraw %}


{% raw %}; Duration of time, in seconds for which to cache realpath information for a given{% endraw %}

{% raw %}; file or directory. For systems with rarely changing files, consider increasing this{% endraw %}

{% raw %}; value.{% endraw %}

{% raw %}; http://php.net/realpath-cache-ttl{% endraw %}

{% raw %};realpath_cache_ttl = 120{% endraw %}


{% raw %}; Enables or disables the circular reference collector.{% endraw %}

{% raw %}; http://php.net/zend.enable-gc{% endraw %}

zend.enable_gc = On

{% raw %}; If enabled, scripts may be written in encodings that are incompatible with{% endraw %}

{% raw %}; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such{% endraw %}

{% raw %}; encodings.  To use this feature, mbstring extension must be enabled.{% endraw %}

{% raw %}; Default: Off{% endraw %}

{% raw %};zend.multibyte = Off{% endraw %}


{% raw %}; Allows to set the default encoding for the scripts.  This value will be used{% endraw %}

{% raw %}; unless "declare(encoding=...)" directive appears at the top of the script.{% endraw %}

{% raw %}; Only affects if zend.multibyte is set.{% endraw %}

{% raw %}; Default: ""{% endraw %}

{% raw %};zend.script_encoding ={% endraw %}


{% raw %}; Allows to include or exclude arguments from stack traces generated for exceptions.{% endraw %}

{% raw %}; In production, it is recommended to turn this setting on to prohibit the output {% endraw %}

{% raw %}; of sensitive information in stack traces{% endraw %}

{% raw %}; Default: Off{% endraw %}

zend.exception_ignore_args = On

{% raw %};;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Miscellaneous ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; Decides whether PHP may expose the fact that it is installed on the server{% endraw %}

{% raw %}; (e.g. by adding its signature to the Web server header).  It is no security{% endraw %}

{% raw %}; threat in any way, but it makes it possible to determine whether you use PHP{% endraw %}

{% raw %}; on your server or not.{% endraw %}

{% raw %}; http://php.net/expose-php{% endraw %}

expose_php = On

{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Resource Limits ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; Maximum execution time of each script, in seconds{% endraw %}

{% raw %}; http://php.net/max-execution-time{% endraw %}

{% raw %}; Note: This directive is hardcoded to 0 for the CLI SAPI{% endraw %}

max_execution_time = 30

{% raw %}; Maximum amount of time each script may spend parsing request data. It's a good{% endraw %}

{% raw %}; idea to limit this time on productions servers in order to eliminate unexpectedly{% endraw %}

{% raw %}; long running scripts.{% endraw %}

{% raw %}; Note: This directive is hardcoded to -1 for the CLI SAPI{% endraw %}

{% raw %}; Default Value: -1 (Unlimited){% endraw %}

{% raw %}; Development Value: 60 (60 seconds){% endraw %}

{% raw %}; Production Value: 60 (60 seconds){% endraw %}

{% raw %}; http://php.net/max-input-time{% endraw %}

max_input_time = 60

{% raw %}; Maximum input variable nesting level{% endraw %}

{% raw %}; http://php.net/max-input-nesting-level{% endraw %}

{% raw %};max_input_nesting_level = 64{% endraw %}


{% raw %}; How many GET/POST/COOKIE input variables may be accepted{% endraw %}

{% raw %};max_input_vars = 1000{% endraw %}


{% raw %}; Maximum amount of memory a script may consume{% endraw %}

{% raw %}; http://php.net/memory-limit{% endraw %}

memory_limit = 128M

{% raw %};;;;;;;;;;;;;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Error handling and logging ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; This directive informs PHP of which errors, warnings and notices you would like{% endraw %}

{% raw %}; it to take action for. The recommended way of setting values for this{% endraw %}

{% raw %}; directive is through the use of the error level constants and bitwise{% endraw %}

{% raw %}; operators. The error level constants are below here for convenience as well as{% endraw %}

{% raw %}; some common settings and their meanings.{% endraw %}

{% raw %}; By default, PHP is set to take action on all errors, notices and warnings EXCEPT{% endraw %}

{% raw %}; those related to E_NOTICE and E_STRICT, which together cover best practices and{% endraw %}

{% raw %}; recommended coding standards in PHP. For performance reasons, this is the{% endraw %}

{% raw %}; recommend error reporting setting. Your production server shouldn't be wasting{% endraw %}

{% raw %}; resources complaining about best practices and coding standards. That's what{% endraw %}

{% raw %}; development servers and development settings are for.{% endraw %}

{% raw %}; Note: The php.ini-development file has this setting as E_ALL. This{% endraw %}

{% raw %}; means it pretty much reports everything which is exactly what you want during{% endraw %}

{% raw %}; development and early testing.{% endraw %}

{% raw %};{% endraw %}

{% raw %}; Error Level Constants:{% endraw %}

{% raw %}; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0){% endraw %}

{% raw %}; E_ERROR           - fatal run-time errors{% endraw %}

{% raw %}; E_RECOVERABLE_ERROR  - almost fatal run-time errors{% endraw %}

{% raw %}; E_WARNING         - run-time warnings (non-fatal errors){% endraw %}

{% raw %}; E_PARSE           - compile-time parse errors{% endraw %}

{% raw %}; E_NOTICE          - run-time notices (these are warnings which often result{% endraw %}

{% raw %};                     from a bug in your code, but it's possible that it was{% endraw %}

{% raw %};                     intentional (e.g., using an uninitialized variable and{% endraw %}

{% raw %};                     relying on the fact it is automatically initialized to an{% endraw %}

{% raw %};                     empty string){% endraw %}

{% raw %}; E_STRICT          - run-time notices, enable to have PHP suggest changes{% endraw %}

{% raw %};                     to your code which will ensure the best interoperability{% endraw %}

{% raw %};                     and forward compatibility of your code{% endraw %}

{% raw %}; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup{% endraw %}

{% raw %}; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's{% endraw %}

{% raw %};                     initial startup{% endraw %}

{% raw %}; E_COMPILE_ERROR   - fatal compile-time errors{% endraw %}

{% raw %}; E_COMPILE_WARNING - compile-time warnings (non-fatal errors){% endraw %}

{% raw %}; E_USER_ERROR      - user-generated error message{% endraw %}

{% raw %}; E_USER_WARNING    - user-generated warning message{% endraw %}

{% raw %}; E_USER_NOTICE     - user-generated notice message{% endraw %}

{% raw %}; E_DEPRECATED      - warn about code that will not work in future versions{% endraw %}

{% raw %};                     of PHP{% endraw %}

{% raw %}; E_USER_DEPRECATED - user-generated deprecation warnings{% endraw %}

{% raw %};{% endraw %}

{% raw %}; Common Values:{% endraw %}

{% raw %};   E_ALL (Show all errors, warnings and notices including coding standards.){% endraw %}

{% raw %};   E_ALL & ~E_NOTICE  (Show all errors, except for notices){% endraw %}

{% raw %};   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.){% endraw %}

{% raw %};   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors){% endraw %}

{% raw %}; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED{% endraw %}

{% raw %}; Development Value: E_ALL{% endraw %}

{% raw %}; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT{% endraw %}

{% raw %}; http://php.net/error-reporting{% endraw %}

error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT

{% raw %}; This directive controls whether or not and where PHP will output errors,{% endraw %}

{% raw %}; notices and warnings too. Error output is very useful during development, but{% endraw %}

{% raw %}; it could be very dangerous in production environments. Depending on the code{% endraw %}

{% raw %}; which is triggering the error, sensitive information could potentially leak{% endraw %}

{% raw %}; out of your application such as database usernames and passwords or worse.{% endraw %}

{% raw %}; For production environments, we recommend logging errors rather than{% endraw %}

{% raw %}; sending them to STDOUT.{% endraw %}

{% raw %}; Possible Values:{% endraw %}

{% raw %};   Off = Do not display any errors{% endraw %}

{% raw %};   stderr = Display errors to STDERR (affects only CGI/CLI binaries!){% endraw %}

{% raw %};   On or stdout = Display errors to STDOUT{% endraw %}

{% raw %}; Default Value: On{% endraw %}

{% raw %}; Development Value: On{% endraw %}

{% raw %}; Production Value: Off{% endraw %}

{% raw %}; http://php.net/display-errors{% endraw %}

display_errors = Off

{% raw %}; The display of errors which occur during PHP's startup sequence are handled{% endraw %}

{% raw %}; separately from display_errors. PHP's default behavior is to suppress those{% endraw %}

{% raw %}; errors from clients. Turning the display of startup errors on can be useful in{% endraw %}

{% raw %}; debugging configuration problems. We strongly recommend you{% endraw %}

{% raw %}; set this to 'off' for production servers.{% endraw %}

{% raw %}; Default Value: Off{% endraw %}

{% raw %}; Development Value: On{% endraw %}

{% raw %}; Production Value: Off{% endraw %}

{% raw %}; http://php.net/display-startup-errors{% endraw %}

display_startup_errors = Off

{% raw %}; Besides displaying errors, PHP can also log errors to locations such as a{% endraw %}

{% raw %}; server-specific log, STDERR, or a location specified by the error_log{% endraw %}

{% raw %}; directive found below. While errors should not be displayed on productions{% endraw %}

{% raw %}; servers they should still be monitored and logging is a great way to do that.{% endraw %}

{% raw %}; Default Value: Off{% endraw %}

{% raw %}; Development Value: On{% endraw %}

{% raw %}; Production Value: On{% endraw %}

{% raw %}; http://php.net/log-errors{% endraw %}

log_errors = On

{% raw %}; Set maximum length of log_errors. In error_log information about the source is{% endraw %}

{% raw %}; added. The default is 1024 and 0 allows to not apply any maximum length at all.{% endraw %}

{% raw %}; http://php.net/log-errors-max-len{% endraw %}

log_errors_max_len = 1024

{% raw %}; Do not log repeated messages. Repeated errors must occur in same file on same{% endraw %}

{% raw %}; line unless ignore_repeated_source is set true.{% endraw %}

{% raw %}; http://php.net/ignore-repeated-errors{% endraw %}

ignore_repeated_errors = Off

{% raw %}; Ignore source of message when ignoring repeated messages. When this setting{% endraw %}

{% raw %}; is On you will not log errors with repeated messages from different files or{% endraw %}

{% raw %}; source lines.{% endraw %}

{% raw %}; http://php.net/ignore-repeated-source{% endraw %}

ignore_repeated_source = Off

{% raw %}; If this parameter is set to Off, then memory leaks will not be shown (on{% endraw %}

{% raw %}; stdout or in the log). This is only effective in a debug compile, and if{% endraw %}

{% raw %}; error reporting includes E_WARNING in the allowed list{% endraw %}

{% raw %}; http://php.net/report-memleaks{% endraw %}

report_memleaks = On

{% raw %}; This setting is on by default.{% endraw %}

{% raw %};report_zend_debug = 0{% endraw %}


{% raw %}; Store the last error/warning message in $php_errormsg (boolean). Setting this value{% endraw %}

{% raw %}; to On can assist in debugging and is appropriate for development servers. It should{% endraw %}

{% raw %}; however be disabled on production servers.{% endraw %}

{% raw %}; This directive is DEPRECATED.{% endraw %}

{% raw %}; Default Value: Off{% endraw %}

{% raw %}; Development Value: Off{% endraw %}

{% raw %}; Production Value: Off{% endraw %}

{% raw %}; http://php.net/track-errors{% endraw %}

{% raw %};track_errors = Off{% endraw %}


{% raw %}; Turn off normal error reporting and emit XML-RPC error XML{% endraw %}

{% raw %}; http://php.net/xmlrpc-errors{% endraw %}

{% raw %};xmlrpc_errors = 0{% endraw %}


{% raw %}; An XML-RPC faultCode{% endraw %}

{% raw %};xmlrpc_error_number = 0{% endraw %}


{% raw %}; When PHP displays or logs an error, it has the capability of formatting the{% endraw %}

{% raw %}; error message as HTML for easier reading. This directive controls whether{% endraw %}

{% raw %}; the error message is formatted as HTML or not.{% endraw %}

{% raw %}; Note: This directive is hardcoded to Off for the CLI SAPI{% endraw %}

{% raw %}; http://php.net/html-errors{% endraw %}

{% raw %};html_errors = On{% endraw %}


{% raw %}; If html_errors is set to On *and* docref_root is not empty, then PHP{% endraw %}

{% raw %}; produces clickable error messages that direct to a page describing the error{% endraw %}

{% raw %}; or function causing the error in detail.{% endraw %}

{% raw %}; You can download a copy of the PHP manual from http://php.net/docs{% endraw %}

{% raw %}; and change docref_root to the base URL of your local copy including the{% endraw %}

{% raw %}; leading '/'. You must also specify the file extension being used including{% endraw %}

{% raw %}; the dot. PHP's default behavior is to leave these settings empty, in which{% endraw %}

{% raw %}; case no links to documentation are generated.{% endraw %}

{% raw %}; Note: Never use this feature for production boxes.{% endraw %}

{% raw %}; http://php.net/docref-root{% endraw %}

{% raw %}; Examples{% endraw %}

{% raw %};docref_root = "/phpmanual/"{% endraw %}


{% raw %}; http://php.net/docref-ext{% endraw %}

{% raw %};docref_ext = .html{% endraw %}


{% raw %}; String to output before an error message. PHP's default behavior is to leave{% endraw %}

{% raw %}; this setting blank.{% endraw %}

{% raw %}; http://php.net/error-prepend-string{% endraw %}

{% raw %}; Example:{% endraw %}

{% raw %};error_prepend_string = "<span style='color: #ff0000'>"{% endraw %}


{% raw %}; String to output after an error message. PHP's default behavior is to leave{% endraw %}

{% raw %}; this setting blank.{% endraw %}

{% raw %}; http://php.net/error-append-string{% endraw %}

{% raw %}; Example:{% endraw %}

{% raw %};error_append_string = "</span>"{% endraw %}


{% raw %}; Log errors to specified file. PHP's default behavior is to leave this value{% endraw %}

{% raw %}; empty.{% endraw %}

{% raw %}; http://php.net/error-log{% endraw %}

{% raw %}; Example:{% endraw %}

{% raw %};error_log = php_errors.log{% endraw %}

{% raw %}; Log errors to syslog (Event Log on Windows).{% endraw %}

{% raw %};error_log = syslog{% endraw %}


{% raw %}; The syslog ident is a string which is prepended to every message logged{% endraw %}

{% raw %}; to syslog. Only used when error_log is set to syslog.{% endraw %}

{% raw %};syslog.ident = php{% endraw %}


{% raw %}; The syslog facility is used to specify what type of program is logging{% endraw %}

{% raw %}; the message. Only used when error_log is set to syslog.{% endraw %}

{% raw %};syslog.facility = user{% endraw %}


{% raw %}; Set this to disable filtering control characters (the default).{% endraw %}

{% raw %}; Some loggers only accept NVT-ASCII, others accept anything that's not{% endraw %}

{% raw %}; control characters. If your logger accepts everything, then no filtering{% endraw %}

{% raw %}; is needed at all.{% endraw %}

{% raw %}; Allowed values are:{% endraw %}

{% raw %};   ascii (all printable ASCII characters and NL){% endraw %}

{% raw %};   no-ctrl (all characters except control characters){% endraw %}

{% raw %};   all (all characters){% endraw %}

{% raw %};   raw (like "all", but messages are not split at newlines){% endraw %}

{% raw %}; http://php.net/syslog.filter{% endraw %}

{% raw %};syslog.filter = ascii{% endraw %}


{% raw %};windows.show_crt_warning{% endraw %}

{% raw %}; Default value: 0{% endraw %}

{% raw %}; Development value: 0{% endraw %}

{% raw %}; Production value: 0{% endraw %}


{% raw %};;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Data Handling ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; The separator used in PHP generated URLs to separate arguments.{% endraw %}

{% raw %}; PHP's default setting is "&".{% endraw %}

{% raw %}; http://php.net/arg-separator.output{% endraw %}

{% raw %}; Example:{% endraw %}

{% raw %};arg_separator.output = "&amp;"{% endraw %}


{% raw %}; List of separator(s) used by PHP to parse input URLs into variables.{% endraw %}

{% raw %}; PHP's default setting is "&".{% endraw %}

{% raw %}; NOTE: Every character in this directive is considered as separator!{% endraw %}

{% raw %}; http://php.net/arg-separator.input{% endraw %}

{% raw %}; Example:{% endraw %}

{% raw %};arg_separator.input = ";&"{% endraw %}


{% raw %}; This directive determines which super global arrays are registered when PHP{% endraw %}

{% raw %}; starts up. G,P,C,E & S are abbreviations for the following respective super{% endraw %}

{% raw %}; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty{% endraw %}

{% raw %}; paid for the registration of these arrays and because ENV is not as commonly{% endraw %}

{% raw %}; used as the others, ENV is not recommended on productions servers. You{% endraw %}

{% raw %}; can still get access to the environment variables through getenv() should you{% endraw %}

{% raw %}; need to.{% endraw %}

{% raw %}; Default Value: "EGPCS"{% endraw %}

{% raw %}; Development Value: "GPCS"{% endraw %}

{% raw %}; Production Value: "GPCS";{% endraw %}

{% raw %}; http://php.net/variables-order{% endraw %}

variables_order = "GPCS"

{% raw %}; This directive determines which super global data (G,P & C) should be{% endraw %}

{% raw %}; registered into the super global array REQUEST. If so, it also determines{% endraw %}

{% raw %}; the order in which that data is registered. The values for this directive{% endraw %}

{% raw %}; are specified in the same manner as the variables_order directive,{% endraw %}

{% raw %}; EXCEPT one. Leaving this value empty will cause PHP to use the value set{% endraw %}

{% raw %}; in the variables_order directive. It does not mean it will leave the super{% endraw %}

{% raw %}; globals array REQUEST empty.{% endraw %}

{% raw %}; Default Value: None{% endraw %}

{% raw %}; Development Value: "GP"{% endraw %}

{% raw %}; Production Value: "GP"{% endraw %}

{% raw %}; http://php.net/request-order{% endraw %}

request_order = "GP"

{% raw %}; This directive determines whether PHP registers $argv & $argc each time it{% endraw %}

{% raw %}; runs. $argv contains an array of all the arguments passed to PHP when a script{% endraw %}

{% raw %}; is invoked. $argc contains an integer representing the number of arguments{% endraw %}

{% raw %}; that were passed when the script was invoked. These arrays are extremely{% endraw %}

{% raw %}; useful when running scripts from the command line. When this directive is{% endraw %}

{% raw %}; enabled, registering these variables consumes CPU cycles and memory each time{% endraw %}

{% raw %}; a script is executed. For performance reasons, this feature should be disabled{% endraw %}

{% raw %}; on production servers.{% endraw %}

{% raw %}; Note: This directive is hardcoded to On for the CLI SAPI{% endraw %}

{% raw %}; Default Value: On{% endraw %}

{% raw %}; Development Value: Off{% endraw %}

{% raw %}; Production Value: Off{% endraw %}

{% raw %}; http://php.net/register-argc-argv{% endraw %}

register_argc_argv = Off

{% raw %}; When enabled, the ENV, REQUEST and SERVER variables are created when they're{% endraw %}

{% raw %}; first used (Just In Time) instead of when the script starts. If these{% endraw %}

{% raw %}; variables are not used within a script, having this directive on will result{% endraw %}

{% raw %}; in a performance gain. The PHP directive register_argc_argv must be disabled{% endraw %}

{% raw %}; for this directive to have any effect.{% endraw %}

{% raw %}; http://php.net/auto-globals-jit{% endraw %}

auto_globals_jit = On

{% raw %}; Whether PHP will read the POST data.{% endraw %}

{% raw %}; This option is enabled by default.{% endraw %}

{% raw %}; Most likely, you won't want to disable this option globally. It causes $_POST{% endraw %}

{% raw %}; and $_FILES to always be empty; the only way you will be able to read the{% endraw %}

{% raw %}; POST data will be through the php://input stream wrapper. This can be useful{% endraw %}

{% raw %}; to proxy requests or to process the POST data in a memory efficient fashion.{% endraw %}

{% raw %}; http://php.net/enable-post-data-reading{% endraw %}

{% raw %};enable_post_data_reading = Off{% endraw %}


{% raw %}; Maximum size of POST data that PHP will accept.{% endraw %}

{% raw %}; Its value may be 0 to disable the limit. It is ignored if POST data reading{% endraw %}

{% raw %}; is disabled through enable_post_data_reading.{% endraw %}

{% raw %}; http://php.net/post-max-size{% endraw %}

post_max_size = 8M

{% raw %}; Automatically add files before PHP document.{% endraw %}

{% raw %}; http://php.net/auto-prepend-file{% endraw %}

auto_prepend_file =

{% raw %}; Automatically add files after PHP document.{% endraw %}

{% raw %}; http://php.net/auto-append-file{% endraw %}

auto_append_file =

{% raw %}; By default, PHP will output a media type using the Content-Type header. To{% endraw %}

{% raw %}; disable this, simply set it to be empty.{% endraw %}

{% raw %};{% endraw %}

{% raw %}; PHP's built-in default media type is set to text/html.{% endraw %}

{% raw %}; http://php.net/default-mimetype{% endraw %}

default_mimetype = "text/html"

{% raw %}; PHP's default character set is set to UTF-8.{% endraw %}

{% raw %}; http://php.net/default-charset{% endraw %}

default_charset = "UTF-8"

{% raw %}; PHP internal character encoding is set to empty.{% endraw %}

{% raw %}; If empty, default_charset is used.{% endraw %}

{% raw %}; http://php.net/internal-encoding{% endraw %}

{% raw %};internal_encoding ={% endraw %}


{% raw %}; PHP input character encoding is set to empty.{% endraw %}

{% raw %}; If empty, default_charset is used.{% endraw %}

{% raw %}; http://php.net/input-encoding{% endraw %}

{% raw %};input_encoding ={% endraw %}


{% raw %}; PHP output character encoding is set to empty.{% endraw %}

{% raw %}; If empty, default_charset is used.{% endraw %}

{% raw %}; See also output_buffer.{% endraw %}

{% raw %}; http://php.net/output-encoding{% endraw %}

{% raw %};output_encoding ={% endraw %}


{% raw %};;;;;;;;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Paths and Directories ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; UNIX: "/path1:/path2"{% endraw %}

{% raw %};include_path = ".:/php/includes"{% endraw %}

{% raw %};{% endraw %}

{% raw %}; Windows: "\path1;\path2"{% endraw %}

{% raw %};include_path = ".;c:\php\includes"{% endraw %}

{% raw %};{% endraw %}

{% raw %}; PHP's default setting for include_path is ".;/path/to/php/pear"{% endraw %}

{% raw %}; http://php.net/include-path{% endraw %}


{% raw %}; The root of the PHP pages, used only if nonempty.{% endraw %}

{% raw %}; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root{% endraw %}

{% raw %}; if you are running php as a CGI under any web server (other than IIS){% endraw %}

{% raw %}; see documentation for security issues.  The alternate is to use the{% endraw %}

{% raw %}; cgi.force_redirect configuration below{% endraw %}

{% raw %}; http://php.net/doc-root{% endraw %}

doc_root =

{% raw %}; The directory under which PHP opens the script using /~username used only{% endraw %}

{% raw %}; if nonempty.{% endraw %}

{% raw %}; http://php.net/user-dir{% endraw %}

user_dir =

{% raw %}; Directory in which the loadable extensions (modules) reside.{% endraw %}

{% raw %}; http://php.net/extension-dir{% endraw %}

{% raw %};extension_dir = "./"{% endraw %}

{% raw %}; On windows:{% endraw %}

{% raw %};extension_dir = "ext"{% endraw %}


{% raw %}; Directory where the temporary files should be placed.{% endraw %}

{% raw %}; Defaults to the system default (see sys_get_temp_dir){% endraw %}

{% raw %};sys_temp_dir = "/tmp"{% endraw %}


{% raw %}; Whether or not to enable the dl() function.  The dl() function does NOT work{% endraw %}

{% raw %}; properly in multithreaded servers, such as IIS or Zeus, and is automatically{% endraw %}

{% raw %}; disabled on them.{% endraw %}

{% raw %}; http://php.net/enable-dl{% endraw %}

enable_dl = Off

{% raw %}; cgi.force_redirect is necessary to provide security running PHP as a CGI under{% endraw %}

{% raw %}; most web servers.  Left undefined, PHP turns this on by default.  You can{% endraw %}

{% raw %}; turn it off here AT YOUR OWN RISK{% endraw %}

{% raw %}; **You CAN safely turn this off for IIS, in fact, you MUST.**{% endraw %}

{% raw %}; http://php.net/cgi.force-redirect{% endraw %}

{% raw %};cgi.force_redirect = 1{% endraw %}


{% raw %}; if cgi.nph is enabled it will force cgi to always sent Status: 200 with{% endraw %}

{% raw %}; every request. PHP's default behavior is to disable this feature.{% endraw %}

{% raw %};cgi.nph = 1{% endraw %}


{% raw %}; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape{% endraw %}

{% raw %}; (iPlanet) web servers, you MAY need to set an environment variable name that PHP{% endraw %}

{% raw %}; will look for to know it is OK to continue execution.  Setting this variable MAY{% endraw %}

{% raw %}; cause security issues, KNOW WHAT YOU ARE DOING FIRST.{% endraw %}

{% raw %}; http://php.net/cgi.redirect-status-env{% endraw %}

{% raw %};cgi.redirect_status_env ={% endraw %}


{% raw %}; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's{% endraw %}

{% raw %}; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok{% endraw %}

{% raw %}; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting{% endraw %}

{% raw %}; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting{% endraw %}

{% raw %}; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts{% endraw %}

{% raw %}; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.{% endraw %}

{% raw %}; http://php.net/cgi.fix-pathinfo{% endraw %}

{% raw %};cgi.fix_pathinfo=1{% endraw %}


{% raw %}; if cgi.discard_path is enabled, the PHP CGI binary can safely be placed outside{% endraw %}

{% raw %}; of the web tree and people will not be able to circumvent .htaccess security.{% endraw %}

{% raw %};cgi.discard_path=1{% endraw %}


{% raw %}; FastCGI under IIS supports the ability to impersonate{% endraw %}

{% raw %}; security tokens of the calling client.  This allows IIS to define the{% endraw %}

{% raw %}; security context that the request runs under.  mod_fastcgi under Apache{% endraw %}

{% raw %}; does not currently support this feature (03/17/2002){% endraw %}

{% raw %}; Set to 1 if running under IIS.  Default is zero.{% endraw %}

{% raw %}; http://php.net/fastcgi.impersonate{% endraw %}

{% raw %};fastcgi.impersonate = 1{% endraw %}


{% raw %}; Disable logging through FastCGI connection. PHP's default behavior is to enable{% endraw %}

{% raw %}; this feature.{% endraw %}

{% raw %};fastcgi.logging = 0{% endraw %}


{% raw %}; cgi.rfc2616_headers configuration option tells PHP what type of headers to{% endraw %}

{% raw %}; use when sending HTTP response code. If set to 0, PHP sends Status: header that{% endraw %}

{% raw %}; is supported by Apache. When this option is set to 1, PHP will send{% endraw %}

{% raw %}; RFC2616 compliant header.{% endraw %}

{% raw %}; Default is zero.{% endraw %}

{% raw %}; http://php.net/cgi.rfc2616-headers{% endraw %}

{% raw %};cgi.rfc2616_headers = 0{% endraw %}


{% raw %}; cgi.check_shebang_line controls whether CGI PHP checks for line starting with #!{% endraw %}

{% raw %}; (shebang) at the top of the running script. This line might be needed if the{% endraw %}

{% raw %}; script support running both as stand-alone script and via PHP CGI<. PHP in CGI{% endraw %}

{% raw %}; mode skips this line and ignores its content if this directive is turned on.{% endraw %}

{% raw %}; http://php.net/cgi.check-shebang-line{% endraw %}

{% raw %};cgi.check_shebang_line=1{% endraw %}


{% raw %};;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; File Uploads ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; Whether to allow HTTP file uploads.{% endraw %}

{% raw %}; http://php.net/file-uploads{% endraw %}

file_uploads = On

{% raw %}; Temporary directory for HTTP uploaded files (will use system default if not{% endraw %}

{% raw %}; specified).{% endraw %}

{% raw %}; http://php.net/upload-tmp-dir{% endraw %}

{% raw %};upload_tmp_dir ={% endraw %}


{% raw %}; Maximum allowed size for uploaded files.{% endraw %}

{% raw %}; http://php.net/upload-max-filesize{% endraw %}

upload_max_filesize = 2M

{% raw %}; Maximum number of files that can be uploaded via a single request{% endraw %}

max_file_uploads = 20

{% raw %};;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Fopen wrappers ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; Whether to allow the treatment of URLs (like http:// or ftp://) as files.{% endraw %}

{% raw %}; http://php.net/allow-url-fopen{% endraw %}

allow_url_fopen = On

{% raw %}; Whether to allow include/require to open URLs (like http:// or ftp://) as files.{% endraw %}

{% raw %}; http://php.net/allow-url-include{% endraw %}

allow_url_include = Off

{% raw %}; Define the anonymous ftp password (your email address). PHP's default setting{% endraw %}

{% raw %}; for this is empty.{% endraw %}

{% raw %}; http://php.net/from{% endraw %}

{% raw %};from="john@doe.com"{% endraw %}


{% raw %}; Define the User-Agent string. PHP's default setting for this is empty.{% endraw %}

{% raw %}; http://php.net/user-agent{% endraw %}

{% raw %};user_agent="PHP"{% endraw %}


{% raw %}; Default timeout for socket based streams (seconds){% endraw %}

{% raw %}; http://php.net/default-socket-timeout{% endraw %}

default_socket_timeout = 60

{% raw %}; If your scripts have to deal with files from Macintosh systems,{% endraw %}

{% raw %}; or you are running on a Mac and need to deal with files from{% endraw %}

{% raw %}; unix or win32 systems, setting this flag will cause PHP to{% endraw %}

{% raw %}; automatically detect the EOL character in those files so that{% endraw %}

{% raw %}; fgets() and file() will work regardless of the source of the file.{% endraw %}

{% raw %}; http://php.net/auto-detect-line-endings{% endraw %}

{% raw %};auto_detect_line_endings = Off{% endraw %}


{% raw %};;;;;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Dynamic Extensions ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;;;;{% endraw %}


{% raw %}; If you wish to have an extension loaded automatically, use the following{% endraw %}

{% raw %}; syntax:{% endraw %}

{% raw %};{% endraw %}

{% raw %};   extension=modulename{% endraw %}

{% raw %};{% endraw %}

{% raw %}; For example:{% endraw %}

{% raw %};{% endraw %}

{% raw %};   extension=mysqli{% endraw %}

{% raw %};{% endraw %}

{% raw %}; When the extension library to load is not located in the default extension{% endraw %}

{% raw %}; directory, You may specify an absolute path to the library file:{% endraw %}

{% raw %};{% endraw %}

{% raw %};   extension=/path/to/extension/mysqli.so{% endraw %}

{% raw %};{% endraw %}

{% raw %}; Note : The syntax used in previous PHP versions ('extension=<ext>.so' and{% endraw %}

{% raw %}; 'extension='php_<ext>.dll') is supported for legacy reasons and may be{% endraw %}

{% raw %}; deprecated in a future PHP major version. So, when it is possible, please{% endraw %}

{% raw %}; move to the new ('extension=<ext>) syntax.{% endraw %}

{% raw %};{% endraw %}

{% raw %}; Notes for Windows environments :{% endraw %}

{% raw %};{% endraw %}

{% raw %}; - Many DLL files are located in the extensions/ (PHP 4) or ext/ (PHP 5+){% endraw %}

{% raw %};   extension folders as well as the separate PECL DLL download (PHP 5+).{% endraw %}

{% raw %};   Be sure to appropriately set the extension_dir directive.{% endraw %}

{% raw %};{% endraw %}

{% raw %};extension=bz2{% endraw %}

{% raw %};extension=curl{% endraw %}

{% raw %};extension=ffi{% endraw %}

{% raw %};extension=ftp{% endraw %}

{% raw %};extension=fileinfo{% endraw %}

{% raw %};extension=gd2{% endraw %}

{% raw %};extension=gettext{% endraw %}

{% raw %};extension=gmp{% endraw %}

{% raw %};extension=intl{% endraw %}

{% raw %};extension=imap{% endraw %}

{% raw %};extension=ldap{% endraw %}

{% raw %};extension=mbstring{% endraw %}

{% raw %};extension=exif      ; Must be after mbstring as it depends on it{% endraw %}

{% raw %};extension=mysqli{% endraw %}

{% raw %};extension=oci8_12c  ; Use with Oracle Database 12c Instant Client{% endraw %}

{% raw %};extension=odbc{% endraw %}

{% raw %};extension=openssl{% endraw %}

{% raw %};extension=pdo_firebird{% endraw %}

{% raw %};extension=pdo_mysql{% endraw %}

{% raw %};extension=pdo_oci{% endraw %}

{% raw %};extension=pdo_odbc{% endraw %}

{% raw %};extension=pdo_pgsql{% endraw %}

{% raw %};extension=pdo_sqlite{% endraw %}

{% raw %};extension=pgsql{% endraw %}

{% raw %};extension=shmop{% endraw %}


{% raw %}; The MIBS data available in the PHP distribution must be installed.{% endraw %}

{% raw %}; See http://www.php.net/manual/en/snmp.installation.php{% endraw %}

{% raw %};extension=snmp{% endraw %}


{% raw %};extension=soap{% endraw %}

{% raw %};extension=sockets{% endraw %}

{% raw %};extension=sodium{% endraw %}

{% raw %};extension=sqlite3{% endraw %}

{% raw %};extension=tidy{% endraw %}

{% raw %};extension=xmlrpc{% endraw %}

{% raw %};extension=xsl{% endraw %}


{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}

{% raw %}; Module Settings ;{% endraw %}

{% raw %};;;;;;;;;;;;;;;;;;;{% endraw %}


[CLI Server]
{% raw %}; Whether the CLI web server uses ANSI color coding in its terminal output.{% endraw %}

cli_server.color = On

[Date]
{% raw %}; Defines the default timezone used by the date functions{% endraw %}

{% raw %}; http://php.net/date.timezone{% endraw %}

{% raw %};date.timezone ={% endraw %}


{% raw %}; http://php.net/date.default-latitude{% endraw %}

{% raw %};date.default_latitude = 31.7667{% endraw %}


{% raw %}; http://php.net/date.default-longitude{% endraw %}

{% raw %};date.default_longitude = 35.2333{% endraw %}


{% raw %}; http://php.net/date.sunrise-zenith{% endraw %}

{% raw %};date.sunrise_zenith = 90.583333{% endraw %}


{% raw %}; http://php.net/date.sunset-zenith{% endraw %}

{% raw %};date.sunset_zenith = 90.583333{% endraw %}


[filter]
{% raw %}; http://php.net/filter.default{% endraw %}

{% raw %};filter.default = unsafe_raw{% endraw %}


{% raw %}; http://php.net/filter.default-flags{% endraw %}

{% raw %};filter.default_flags ={% endraw %}


[iconv]
{% raw %}; Use of this INI entry is deprecated, use global input_encoding instead.{% endraw %}

{% raw %}; If empty, default_charset or input_encoding or iconv.input_encoding is used.{% endraw %}

{% raw %}; The precedence is: default_charset < input_encoding < iconv.input_encoding{% endraw %}

{% raw %};iconv.input_encoding ={% endraw %}


{% raw %}; Use of this INI entry is deprecated, use global internal_encoding instead.{% endraw %}

{% raw %}; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.{% endraw %}

{% raw %}; The precedence is: default_charset < internal_encoding < iconv.internal_encoding{% endraw %}

{% raw %};iconv.internal_encoding ={% endraw %}


{% raw %}; Use of this INI entry is deprecated, use global output_encoding instead.{% endraw %}

{% raw %}; If empty, default_charset or output_encoding or iconv.output_encoding is used.{% endraw %}

{% raw %}; The precedence is: default_charset < output_encoding < iconv.output_encoding{% endraw %}

{% raw %}; To use an output encoding conversion, iconv's output handler must be set{% endraw %}

{% raw %}; otherwise output encoding conversion cannot be performed.{% endraw %}

{% raw %};iconv.output_encoding ={% endraw %}


[imap]
{% raw %}; rsh/ssh logins are disabled by default. Use this INI entry if you want to{% endraw %}

{% raw %}; enable them. Note that the IMAP library does not filter mailbox names before{% endraw %}

{% raw %}; passing them to rsh/ssh command, thus passing untrusted data to this function{% endraw %}

{% raw %}; with rsh/ssh enabled is insecure.{% endraw %}

{% raw %};imap.enable_insecure_rsh=0{% endraw %}


[intl]
{% raw %};intl.default_locale ={% endraw %}

{% raw %}; This directive allows you to produce PHP errors when some error{% endraw %}

{% raw %}; happens within intl functions. The value is the level of the error produced.{% endraw %}

{% raw %}; Default is 0, which does not produce any errors.{% endraw %}

{% raw %};intl.error_level = E_WARNING{% endraw %}

{% raw %};intl.use_exceptions = 0{% endraw %}


[sqlite3]
{% raw %}; Directory pointing to SQLite3 extensions{% endraw %}

{% raw %}; http://php.net/sqlite3.extension-dir{% endraw %}

{% raw %};sqlite3.extension_dir ={% endraw %}


{% raw %}; SQLite defensive mode flag (only available from SQLite 3.26+){% endraw %}

{% raw %}; When the defensive flag is enabled, language features that allow ordinary{% endraw %}

{% raw %}; SQL to deliberately corrupt the database file are disabled. This forbids{% endraw %}

{% raw %}; writing directly to the schema, shadow tables (eg. FTS data tables), or{% endraw %}

{% raw %}; the sqlite_dbpage virtual table.{% endraw %}

{% raw %}; https://www.sqlite.org/c3ref/c_dbconfig_defensive.html{% endraw %}

{% raw %}; (for older SQLite versions, this flag has no use){% endraw %}

{% raw %};sqlite3.defensive = 1{% endraw %}


[Pcre]
{% raw %}; PCRE library backtracking limit.{% endraw %}

{% raw %}; http://php.net/pcre.backtrack-limit{% endraw %}

{% raw %};pcre.backtrack_limit=100000{% endraw %}


{% raw %}; PCRE library recursion limit.{% endraw %}

{% raw %}; Please note that if you set this value to a high number you may consume all{% endraw %}

{% raw %}; the available process stack and eventually crash PHP (due to reaching the{% endraw %}

{% raw %}; stack size limit imposed by the Operating System).{% endraw %}

{% raw %}; http://php.net/pcre.recursion-limit{% endraw %}

{% raw %};pcre.recursion_limit=100000{% endraw %}


{% raw %}; Enables or disables JIT compilation of patterns. This requires the PCRE{% endraw %}

{% raw %}; library to be compiled with JIT support.{% endraw %}

{% raw %};pcre.jit=1{% endraw %}


[Pdo]
{% raw %}; Whether to pool ODBC connections. Can be one of "strict", "relaxed" or "off"{% endraw %}

{% raw %}; http://php.net/pdo-odbc.connection-pooling{% endraw %}

{% raw %};pdo_odbc.connection_pooling=strict{% endraw %}


{% raw %};pdo_odbc.db2_instance_name{% endraw %}


[Pdo_mysql]
{% raw %}; Default socket name for local MySQL connects.  If empty, uses the built-in{% endraw %}

{% raw %}; MySQL defaults.{% endraw %}

pdo_mysql.default_socket=

[Phar]
{% raw %}; http://php.net/phar.readonly{% endraw %}

{% raw %};phar.readonly = On{% endraw %}


{% raw %}; http://php.net/phar.require-hash{% endraw %}

{% raw %};phar.require_hash = On{% endraw %}


{% raw %};phar.cache_list ={% endraw %}


[mail function]
{% raw %}; For Win32 only.{% endraw %}

{% raw %}; http://php.net/smtp{% endraw %}

SMTP = localhost
{% raw %}; http://php.net/smtp-port{% endraw %}

smtp_port = 25

{% raw %}; For Win32 only.{% endraw %}

{% raw %}; http://php.net/sendmail-from{% endraw %}

{% raw %};sendmail_from = me@example.com{% endraw %}


{% raw %}; For Unix only.  You may supply arguments as well (default: "sendmail -t -i").{% endraw %}

{% raw %}; http://php.net/sendmail-path{% endraw %}

{% raw %};sendmail_path ={% endraw %}


{% raw %}; Force the addition of the specified parameters to be passed as extra parameters{% endraw %}

{% raw %}; to the sendmail binary. These parameters will always replace the value of{% endraw %}

{% raw %}; the 5th parameter to mail().{% endraw %}

{% raw %};mail.force_extra_parameters ={% endraw %}


{% raw %}; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename{% endraw %}

mail.add_x_header = Off

{% raw %}; The path to a log file that will log all mail() calls. Log entries include{% endraw %}

{% raw %}; the full path of the script, line number, To address and headers.{% endraw %}

{% raw %};mail.log ={% endraw %}

{% raw %}; Log mail to syslog (Event Log on Windows).{% endraw %}

{% raw %};mail.log = syslog{% endraw %}


[ODBC]
{% raw %}; http://php.net/odbc.default-db{% endraw %}

{% raw %};odbc.default_db    =  Not yet implemented{% endraw %}


{% raw %}; http://php.net/odbc.default-user{% endraw %}

{% raw %};odbc.default_user  =  Not yet implemented{% endraw %}


{% raw %}; http://php.net/odbc.default-pw{% endraw %}

{% raw %};odbc.default_pw    =  Not yet implemented{% endraw %}


{% raw %}; Controls the ODBC cursor model.{% endraw %}

{% raw %}; Default: SQL_CURSOR_STATIC (default).{% endraw %}

{% raw %};odbc.default_cursortype{% endraw %}


{% raw %}; Allow or prevent persistent links.{% endraw %}

{% raw %}; http://php.net/odbc.allow-persistent{% endraw %}

odbc.allow_persistent = On

{% raw %}; Check that a connection is still valid before reuse.{% endraw %}

{% raw %}; http://php.net/odbc.check-persistent{% endraw %}

odbc.check_persistent = On

{% raw %}; Maximum number of persistent links.  -1 means no limit.{% endraw %}

{% raw %}; http://php.net/odbc.max-persistent{% endraw %}

odbc.max_persistent = -1

{% raw %}; Maximum number of links (persistent + non-persistent).  -1 means no limit.{% endraw %}

{% raw %}; http://php.net/odbc.max-links{% endraw %}

odbc.max_links = -1

{% raw %}; Handling of LONG fields.  Returns number of bytes to variables.  0 means{% endraw %}

{% raw %}; passthru.{% endraw %}

{% raw %}; http://php.net/odbc.defaultlrl{% endraw %}

odbc.defaultlrl = 4096

{% raw %}; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.{% endraw %}

{% raw %}; See the documentation on odbc_binmode and odbc_longreadlen for an explanation{% endraw %}

{% raw %}; of odbc.defaultlrl and odbc.defaultbinmode{% endraw %}

{% raw %}; http://php.net/odbc.defaultbinmode{% endraw %}

odbc.defaultbinmode = 1

[MySQLi]

{% raw %}; Maximum number of persistent links.  -1 means no limit.{% endraw %}

{% raw %}; http://php.net/mysqli.max-persistent{% endraw %}

mysqli.max_persistent = -1

{% raw %}; Allow accessing, from PHP's perspective, local files with LOAD DATA statements{% endraw %}

{% raw %}; http://php.net/mysqli.allow_local_infile{% endraw %}

{% raw %};mysqli.allow_local_infile = On{% endraw %}


{% raw %}; Allow or prevent persistent links.{% endraw %}

{% raw %}; http://php.net/mysqli.allow-persistent{% endraw %}

mysqli.allow_persistent = On

{% raw %}; Maximum number of links.  -1 means no limit.{% endraw %}

{% raw %}; http://php.net/mysqli.max-links{% endraw %}

mysqli.max_links = -1

{% raw %}; Default port number for mysqli_connect().  If unset, mysqli_connect() will use{% endraw %}

{% raw %}; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the{% endraw %}

{% raw %}; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look{% endraw %}

{% raw %}; at MYSQL_PORT.{% endraw %}

{% raw %}; http://php.net/mysqli.default-port{% endraw %}

mysqli.default_port = 3306

{% raw %}; Default socket name for local MySQL connects.  If empty, uses the built-in{% endraw %}

{% raw %}; MySQL defaults.{% endraw %}

{% raw %}; http://php.net/mysqli.default-socket{% endraw %}

mysqli.default_socket =

{% raw %}; Default host for mysqli_connect() (doesn't apply in safe mode).{% endraw %}

{% raw %}; http://php.net/mysqli.default-host{% endraw %}

mysqli.default_host =

{% raw %}; Default user for mysqli_connect() (doesn't apply in safe mode).{% endraw %}

{% raw %}; http://php.net/mysqli.default-user{% endraw %}

mysqli.default_user =

{% raw %}; Default password for mysqli_connect() (doesn't apply in safe mode).{% endraw %}

{% raw %}; Note that this is generally a *bad* idea to store passwords in this file.{% endraw %}

{% raw %}; *Any* user with PHP access can run 'echo get_cfg_var("mysqli.default_pw"){% endraw %}

{% raw %}; and reveal this password!  And of course, any users with read access to this{% endraw %}

{% raw %}; file will be able to reveal the password as well.{% endraw %}

{% raw %}; http://php.net/mysqli.default-pw{% endraw %}

mysqli.default_pw =

{% raw %}; Allow or prevent reconnect{% endraw %}

mysqli.reconnect = Off

[mysqlnd]
{% raw %}; Enable / Disable collection of general statistics by mysqlnd which can be{% endraw %}

{% raw %}; used to tune and monitor MySQL operations.{% endraw %}

mysqlnd.collect_statistics = On

{% raw %}; Enable / Disable collection of memory usage statistics by mysqlnd which can be{% endraw %}

{% raw %}; used to tune and monitor MySQL operations.{% endraw %}

mysqlnd.collect_memory_statistics = Off

{% raw %}; Records communication from all extensions using mysqlnd to the specified log{% endraw %}

{% raw %}; file.{% endraw %}

{% raw %}; http://php.net/mysqlnd.debug{% endraw %}

{% raw %};mysqlnd.debug ={% endraw %}


{% raw %}; Defines which queries will be logged.{% endraw %}

{% raw %};mysqlnd.log_mask = 0{% endraw %}


{% raw %}; Default size of the mysqlnd memory pool, which is used by result sets.{% endraw %}

{% raw %};mysqlnd.mempool_default_size = 16000{% endraw %}


{% raw %}; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.{% endraw %}

{% raw %};mysqlnd.net_cmd_buffer_size = 2048{% endraw %}


{% raw %}; Size of a pre-allocated buffer used for reading data sent by the server in{% endraw %}

{% raw %}; bytes.{% endraw %}

{% raw %};mysqlnd.net_read_buffer_size = 32768{% endraw %}


{% raw %}; Timeout for network requests in seconds.{% endraw %}

{% raw %};mysqlnd.net_read_timeout = 31536000{% endraw %}


{% raw %}; SHA-256 Authentication Plugin related. File with the MySQL server public RSA{% endraw %}

{% raw %}; key.{% endraw %}

{% raw %};mysqlnd.sha256_server_public_key ={% endraw %}


[OCI8]

{% raw %}; Connection: Enables privileged connections using external{% endraw %}

{% raw %}; credentials (OCI_SYSOPER, OCI_SYSDBA){% endraw %}

{% raw %}; http://php.net/oci8.privileged-connect{% endraw %}

{% raw %};oci8.privileged_connect = Off{% endraw %}


{% raw %}; Connection: The maximum number of persistent OCI8 connections per{% endraw %}

{% raw %}; process. Using -1 means no limit.{% endraw %}

{% raw %}; http://php.net/oci8.max-persistent{% endraw %}

{% raw %};oci8.max_persistent = -1{% endraw %}


{% raw %}; Connection: The maximum number of seconds a process is allowed to{% endraw %}

{% raw %}; maintain an idle persistent connection. Using -1 means idle{% endraw %}

{% raw %}; persistent connections will be maintained forever.{% endraw %}

{% raw %}; http://php.net/oci8.persistent-timeout{% endraw %}

{% raw %};oci8.persistent_timeout = -1{% endraw %}


{% raw %}; Connection: The number of seconds that must pass before issuing a{% endraw %}

{% raw %}; ping during oci_pconnect() to check the connection validity. When{% endraw %}

{% raw %}; set to 0, each oci_pconnect() will cause a ping. Using -1 disables{% endraw %}

{% raw %}; pings completely.{% endraw %}

{% raw %}; http://php.net/oci8.ping-interval{% endraw %}

{% raw %};oci8.ping_interval = 60{% endraw %}


{% raw %}; Connection: Set this to a user chosen connection class to be used{% endraw %}

{% raw %}; for all pooled server requests with Oracle 11g Database Resident{% endraw %}

{% raw %}; Connection Pooling (DRCP).  To use DRCP, this value should be set to{% endraw %}

{% raw %}; the same string for all web servers running the same application,{% endraw %}

{% raw %}; the database pool must be configured, and the connection string must{% endraw %}

{% raw %}; specify to use a pooled server.{% endraw %}

{% raw %};oci8.connection_class ={% endraw %}


{% raw %}; High Availability: Using On lets PHP receive Fast Application{% endraw %}

{% raw %}; Notification (FAN) events generated when a database node fails. The{% endraw %}

{% raw %}; database must also be configured to post FAN events.{% endraw %}

{% raw %};oci8.events = Off{% endraw %}


{% raw %}; Tuning: This option enables statement caching, and specifies how{% endraw %}

{% raw %}; many statements to cache. Using 0 disables statement caching.{% endraw %}

{% raw %}; http://php.net/oci8.statement-cache-size{% endraw %}

{% raw %};oci8.statement_cache_size = 20{% endraw %}


{% raw %}; Tuning: Enables statement prefetching and sets the default number of{% endraw %}

{% raw %}; rows that will be fetched automatically after statement execution.{% endraw %}

{% raw %}; http://php.net/oci8.default-prefetch{% endraw %}

{% raw %};oci8.default_prefetch = 100{% endraw %}


{% raw %}; Compatibility. Using On means oci_close() will not close{% endraw %}

{% raw %}; oci_connect() and oci_new_connect() connections.{% endraw %}

{% raw %}; http://php.net/oci8.old-oci-close-semantics{% endraw %}

{% raw %};oci8.old_oci_close_semantics = Off{% endraw %}


[PostgreSQL]
{% raw %}; Allow or prevent persistent links.{% endraw %}

{% raw %}; http://php.net/pgsql.allow-persistent{% endraw %}

pgsql.allow_persistent = On

{% raw %}; Detect broken persistent links always with pg_pconnect().{% endraw %}

{% raw %}; Auto reset feature requires a little overheads.{% endraw %}

{% raw %}; http://php.net/pgsql.auto-reset-persistent{% endraw %}

pgsql.auto_reset_persistent = Off

{% raw %}; Maximum number of persistent links.  -1 means no limit.{% endraw %}

{% raw %}; http://php.net/pgsql.max-persistent{% endraw %}

pgsql.max_persistent = -1

{% raw %}; Maximum number of links (persistent+non persistent).  -1 means no limit.{% endraw %}

{% raw %}; http://php.net/pgsql.max-links{% endraw %}

pgsql.max_links = -1

{% raw %}; Ignore PostgreSQL backends Notice message or not.{% endraw %}

{% raw %}; Notice message logging require a little overheads.{% endraw %}

{% raw %}; http://php.net/pgsql.ignore-notice{% endraw %}

pgsql.ignore_notice = 0

{% raw %}; Log PostgreSQL backends Notice message or not.{% endraw %}

{% raw %}; Unless pgsql.ignore_notice=0, module cannot log notice message.{% endraw %}

{% raw %}; http://php.net/pgsql.log-notice{% endraw %}

pgsql.log_notice = 0

[bcmath]
{% raw %}; Number of decimal digits for all bcmath functions.{% endraw %}

{% raw %}; http://php.net/bcmath.scale{% endraw %}

bcmath.scale = 0

[browscap]
{% raw %}; http://php.net/browscap{% endraw %}

{% raw %};browscap = extra/browscap.ini{% endraw %}


[Session]
{% raw %}; Handler used to store/retrieve data.{% endraw %}

{% raw %}; http://php.net/session.save-handler{% endraw %}

session.save_handler = files

{% raw %}; Argument passed to save_handler.  In the case of files, this is the path{% endraw %}

{% raw %}; where data files are stored. Note: Windows users have to change this{% endraw %}

{% raw %}; variable in order to use PHP's session functions.{% endraw %}

{% raw %};{% endraw %}

{% raw %}; The path can be defined as:{% endraw %}

{% raw %};{% endraw %}

{% raw %};     session.save_path = "N;/path"{% endraw %}

{% raw %};{% endraw %}

{% raw %}; where N is an integer.  Instead of storing all the session files in{% endraw %}

{% raw %}; /path, what this will do is use subdirectories N-levels deep, and{% endraw %}

{% raw %}; store the session data in those directories.  This is useful if{% endraw %}

{% raw %}; your OS has problems with many files in one directory, and is{% endraw %}

{% raw %}; a more efficient layout for servers that handle many sessions.{% endraw %}

{% raw %};{% endraw %}

{% raw %}; NOTE 1: PHP will not create this directory structure automatically.{% endraw %}

{% raw %};         You can use the script in the ext/session dir for that purpose.{% endraw %}

{% raw %}; NOTE 2: See the section on garbage collection below if you choose to{% endraw %}

{% raw %};         use subdirectories for session storage{% endraw %}

{% raw %};{% endraw %}

{% raw %}; The file storage module creates files using mode 600 by default.{% endraw %}

{% raw %}; You can change that by using{% endraw %}

{% raw %};{% endraw %}

{% raw %};     session.save_path = "N;MODE;/path"{% endraw %}

{% raw %};{% endraw %}

{% raw %}; where MODE is the octal representation of the mode. Note that this{% endraw %}

{% raw %}; does not overwrite the process's umask.{% endraw %}

{% raw %}; http://php.net/session.save-path{% endraw %}

{% raw %};session.save_path = "/tmp"{% endraw %}


{% raw %}; Whether to use strict session mode.{% endraw %}

{% raw %}; Strict session mode does not accept an uninitialized session ID, and{% endraw %}

{% raw %}; regenerates the session ID if the browser sends an uninitialized session ID.{% endraw %}

{% raw %}; Strict mode protects applications from session fixation via a session adoption{% endraw %}

{% raw %}; vulnerability. It is disabled by default for maximum compatibility, but{% endraw %}

{% raw %}; enabling it is encouraged.{% endraw %}

{% raw %}; https://wiki.php.net/rfc/strict_sessions{% endraw %}

session.use_strict_mode = 0

{% raw %}; Whether to use cookies.{% endraw %}

{% raw %}; http://php.net/session.use-cookies{% endraw %}

session.use_cookies = 1

{% raw %}; http://php.net/session.cookie-secure{% endraw %}

{% raw %};session.cookie_secure ={% endraw %}


{% raw %}; This option forces PHP to fetch and use a cookie for storing and maintaining{% endraw %}

{% raw %}; the session id. We encourage this operation as it's very helpful in combating{% endraw %}

{% raw %}; session hijacking when not specifying and managing your own session id. It is{% endraw %}

{% raw %}; not the be-all and end-all of session hijacking defense, but it's a good start.{% endraw %}

{% raw %}; http://php.net/session.use-only-cookies{% endraw %}

session.use_only_cookies = 1

{% raw %}; Name of the session (used as cookie name).{% endraw %}

{% raw %}; http://php.net/session.name{% endraw %}

session.name = PHPSESSID

{% raw %}; Initialize session on request startup.{% endraw %}

{% raw %}; http://php.net/session.auto-start{% endraw %}

session.auto_start = 0

{% raw %}; Lifetime in seconds of cookie or, if 0, until browser is restarted.{% endraw %}

{% raw %}; http://php.net/session.cookie-lifetime{% endraw %}

session.cookie_lifetime = 0

{% raw %}; The path for which the cookie is valid.{% endraw %}

{% raw %}; http://php.net/session.cookie-path{% endraw %}

session.cookie_path = /

{% raw %}; The domain for which the cookie is valid.{% endraw %}

{% raw %}; http://php.net/session.cookie-domain{% endraw %}

session.cookie_domain =

{% raw %}; Whether or not to add the httpOnly flag to the cookie, which makes it{% endraw %}

{% raw %}; inaccessible to browser scripting languages such as JavaScript.{% endraw %}

{% raw %}; http://php.net/session.cookie-httponly{% endraw %}

session.cookie_httponly =

{% raw %}; Add SameSite attribute to cookie to help mitigate Cross-Site Request Forgery (CSRF/XSRF){% endraw %}

{% raw %}; Current valid values are "Strict", "Lax" or "None". When using "None",{% endraw %}

{% raw %}; make sure to include the quotes, as `none` is interpreted like `false` in ini files.{% endraw %}

{% raw %}; https://tools.ietf.org/html/draft-west-first-party-cookies-07{% endraw %}

session.cookie_samesite =

{% raw %}; Handler used to serialize data. php is the standard serializer of PHP.{% endraw %}

{% raw %}; http://php.net/session.serialize-handler{% endraw %}

session.serialize_handler = php

{% raw %}; Defines the probability that the 'garbage collection' process is started on every{% endraw %}

{% raw %}; session initialization. The probability is calculated by using gc_probability/gc_divisor,{% endraw %}

{% raw %}; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.{% endraw %}

{% raw %}; Default Value: 1{% endraw %}

{% raw %}; Development Value: 1{% endraw %}

{% raw %}; Production Value: 1{% endraw %}

{% raw %}; http://php.net/session.gc-probability{% endraw %}

session.gc_probability = 1

{% raw %}; Defines the probability that the 'garbage collection' process is started on every{% endraw %}

{% raw %}; session initialization. The probability is calculated by using gc_probability/gc_divisor,{% endraw %}

{% raw %}; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.{% endraw %}

{% raw %}; For high volume production servers, using a value of 1000 is a more efficient approach.{% endraw %}

{% raw %}; Default Value: 100{% endraw %}

{% raw %}; Development Value: 1000{% endraw %}

{% raw %}; Production Value: 1000{% endraw %}

{% raw %}; http://php.net/session.gc-divisor{% endraw %}

session.gc_divisor = 1000

{% raw %}; After this number of seconds, stored data will be seen as 'garbage' and{% endraw %}

{% raw %}; cleaned up by the garbage collection process.{% endraw %}

{% raw %}; http://php.net/session.gc-maxlifetime{% endraw %}

session.gc_maxlifetime = 1440

{% raw %}; NOTE: If you are using the subdirectory option for storing session files{% endraw %}

{% raw %};       (see session.save_path above), then garbage collection does *not*{% endraw %}

{% raw %};       happen automatically.  You will need to do your own garbage{% endraw %}

{% raw %};       collection through a shell script, cron entry, or some other method.{% endraw %}

{% raw %};       For example, the following script is the equivalent of setting{% endraw %}

{% raw %};       session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):{% endraw %}

{% raw %};          find /path/to/sessions -cmin +24 -type f | xargs rm{% endraw %}


{% raw %}; Check HTTP Referer to invalidate externally stored URLs containing ids.{% endraw %}

{% raw %}; HTTP_REFERER has to contain this substring for the session to be{% endraw %}

{% raw %}; considered as valid.{% endraw %}

{% raw %}; http://php.net/session.referer-check{% endraw %}

session.referer_check =

{% raw %}; Set to {nocache,private,public,} to determine HTTP caching aspects{% endraw %}

{% raw %}; or leave this empty to avoid sending anti-caching headers.{% endraw %}

{% raw %}; http://php.net/session.cache-limiter{% endraw %}

session.cache_limiter = nocache

{% raw %}; Document expires after n minutes.{% endraw %}

{% raw %}; http://php.net/session.cache-expire{% endraw %}

session.cache_expire = 180

{% raw %}; trans sid support is disabled by default.{% endraw %}

{% raw %}; Use of trans sid may risk your users' security.{% endraw %}

{% raw %}; Use this option with caution.{% endraw %}

{% raw %}; - User may send URL contains active session ID{% endraw %}

{% raw %};   to other person via. email/irc/etc.{% endraw %}

{% raw %}; - URL that contains active session ID may be stored{% endraw %}

{% raw %};   in publicly accessible computer.{% endraw %}

{% raw %}; - User may access your site with the same session ID{% endraw %}

{% raw %};   always using URL stored in browser's history or bookmarks.{% endraw %}

{% raw %}; http://php.net/session.use-trans-sid{% endraw %}

session.use_trans_sid = 0

{% raw %}; Set session ID character length. This value could be between 22 to 256.{% endraw %}

{% raw %}; Shorter length than default is supported only for compatibility reason.{% endraw %}

{% raw %}; Users should use 32 or more chars.{% endraw %}

{% raw %}; http://php.net/session.sid-length{% endraw %}

{% raw %}; Default Value: 32{% endraw %}

{% raw %}; Development Value: 26{% endraw %}

{% raw %}; Production Value: 26{% endraw %}

session.sid_length = 26

{% raw %}; The URL rewriter will look for URLs in a defined set of HTML tags.{% endraw %}

{% raw %}; <form> is special; if you include them here, the rewriter will{% endraw %}

{% raw %}; add a hidden <input> field with the info which is otherwise appended{% endraw %}

{% raw %}; to URLs. <form> tag's action attribute URL will not be modified{% endraw %}

{% raw %}; unless it is specified.{% endraw %}

{% raw %}; Note that all valid entries require a "=", even if no value follows.{% endraw %}

{% raw %}; Default Value: "a=href,area=href,frame=src,form="{% endraw %}

{% raw %}; Development Value: "a=href,area=href,frame=src,form="{% endraw %}

{% raw %}; Production Value: "a=href,area=href,frame=src,form="{% endraw %}

{% raw %}; http://php.net/url-rewriter.tags{% endraw %}

session.trans_sid_tags = "a=href,area=href,frame=src,form="

{% raw %}; URL rewriter does not rewrite absolute URLs by default.{% endraw %}

{% raw %}; To enable rewrites for absolute paths, target hosts must be specified{% endraw %}

{% raw %}; at RUNTIME. i.e. use ini_set(){% endraw %}

{% raw %}; <form> tags is special. PHP will check action attribute's URL regardless{% endraw %}

{% raw %}; of session.trans_sid_tags setting.{% endraw %}

{% raw %}; If no host is defined, HTTP_HOST will be used for allowed host.{% endraw %}

{% raw %}; Example value: php.net,www.php.net,wiki.php.net{% endraw %}

{% raw %}; Use "," for multiple hosts. No spaces are allowed.{% endraw %}

{% raw %}; Default Value: ""{% endraw %}

{% raw %}; Development Value: ""{% endraw %}

{% raw %}; Production Value: ""{% endraw %}

{% raw %};session.trans_sid_hosts=""{% endraw %}


{% raw %}; Define how many bits are stored in each character when converting{% endraw %}

{% raw %}; the binary hash data to something readable.{% endraw %}

{% raw %}; Possible values:{% endraw %}

{% raw %};   4  (4 bits: 0-9, a-f){% endraw %}

{% raw %};   5  (5 bits: 0-9, a-v){% endraw %}

{% raw %};   6  (6 bits: 0-9, a-z, A-Z, "-", ","){% endraw %}

{% raw %}; Default Value: 4{% endraw %}

{% raw %}; Development Value: 5{% endraw %}

{% raw %}; Production Value: 5{% endraw %}

{% raw %}; http://php.net/session.hash-bits-per-character{% endraw %}

session.sid_bits_per_character = 5

{% raw %}; Enable upload progress tracking in $_SESSION{% endraw %}

{% raw %}; Default Value: On{% endraw %}

{% raw %}; Development Value: On{% endraw %}

{% raw %}; Production Value: On{% endraw %}

{% raw %}; http://php.net/session.upload-progress.enabled{% endraw %}

{% raw %};session.upload_progress.enabled = On{% endraw %}


{% raw %}; Cleanup the progress information as soon as all POST data has been read{% endraw %}

{% raw %}; (i.e. upload completed).{% endraw %}

{% raw %}; Default Value: On{% endraw %}

{% raw %}; Development Value: On{% endraw %}

{% raw %}; Production Value: On{% endraw %}

{% raw %}; http://php.net/session.upload-progress.cleanup{% endraw %}

{% raw %};session.upload_progress.cleanup = On{% endraw %}


{% raw %}; A prefix used for the upload progress key in $_SESSION{% endraw %}

{% raw %}; Default Value: "upload_progress_"{% endraw %}

{% raw %}; Development Value: "upload_progress_"{% endraw %}

{% raw %}; Production Value: "upload_progress_"{% endraw %}

{% raw %}; http://php.net/session.upload-progress.prefix{% endraw %}

{% raw %};session.upload_progress.prefix = "upload_progress_"{% endraw %}


{% raw %}; The index name (concatenated with the prefix) in $_SESSION{% endraw %}

{% raw %}; containing the upload progress information{% endraw %}

{% raw %}; Default Value: "PHP_SESSION_UPLOAD_PROGRESS"{% endraw %}

{% raw %}; Development Value: "PHP_SESSION_UPLOAD_PROGRESS"{% endraw %}

{% raw %}; Production Value: "PHP_SESSION_UPLOAD_PROGRESS"{% endraw %}

{% raw %}; http://php.net/session.upload-progress.name{% endraw %}

{% raw %};session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"{% endraw %}


{% raw %}; How frequently the upload progress should be updated.{% endraw %}

{% raw %}; Given either in percentages (per-file), or in bytes{% endraw %}

{% raw %}; Default Value: "1%"{% endraw %}

{% raw %}; Development Value: "1%"{% endraw %}

{% raw %}; Production Value: "1%"{% endraw %}

{% raw %}; http://php.net/session.upload-progress.freq{% endraw %}

{% raw %};session.upload_progress.freq =  "1%"{% endraw %}


{% raw %}; The minimum delay between updates, in seconds{% endraw %}

{% raw %}; Default Value: 1{% endraw %}

{% raw %}; Development Value: 1{% endraw %}

{% raw %}; Production Value: 1{% endraw %}

{% raw %}; http://php.net/session.upload-progress.min-freq{% endraw %}

{% raw %};session.upload_progress.min_freq = "1"{% endraw %}


{% raw %}; Only write session data when session data is changed. Enabled by default.{% endraw %}

{% raw %}; http://php.net/session.lazy-write{% endraw %}

{% raw %};session.lazy_write = On{% endraw %}


[Assertion]
{% raw %}; Switch whether to compile assertions at all (to have no overhead at run-time){% endraw %}

{% raw %}; -1: Do not compile at all{% endraw %}

{% raw %};  0: Jump over assertion at run-time{% endraw %}

{% raw %};  1: Execute assertions{% endraw %}

{% raw %}; Changing from or to a negative value is only possible in php.ini! (For turning assertions on and off at run-time, see assert.active, when zend.assertions = 1){% endraw %}

{% raw %}; Default Value: 1{% endraw %}

{% raw %}; Development Value: 1{% endraw %}

{% raw %}; Production Value: -1{% endraw %}

{% raw %}; http://php.net/zend.assertions{% endraw %}

zend.assertions = -1

{% raw %}; Assert(expr); active by default.{% endraw %}

{% raw %}; http://php.net/assert.active{% endraw %}

{% raw %};assert.active = On{% endraw %}


{% raw %}; Throw an AssertionError on failed assertions{% endraw %}

{% raw %}; http://php.net/assert.exception{% endraw %}

{% raw %};assert.exception = On{% endraw %}


{% raw %}; Issue a PHP warning for each failed assertion. (Overridden by assert.exception if active){% endraw %}

{% raw %}; http://php.net/assert.warning{% endraw %}

{% raw %};assert.warning = On{% endraw %}


{% raw %}; Don't bail out by default.{% endraw %}

{% raw %}; http://php.net/assert.bail{% endraw %}

{% raw %};assert.bail = Off{% endraw %}


{% raw %}; User-function to be called if an assertion fails.{% endraw %}

{% raw %}; http://php.net/assert.callback{% endraw %}

{% raw %};assert.callback = 0{% endraw %}


{% raw %}; Eval the expression with current error_reporting().  Set to true if you want{% endraw %}

{% raw %}; error_reporting(0) around the eval().{% endraw %}

{% raw %}; http://php.net/assert.quiet-eval{% endraw %}

{% raw %};assert.quiet_eval = 0{% endraw %}


[COM]
{% raw %}; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs{% endraw %}

{% raw %}; http://php.net/com.typelib-file{% endraw %}

{% raw %};com.typelib_file ={% endraw %}


{% raw %}; allow Distributed-COM calls{% endraw %}

{% raw %}; http://php.net/com.allow-dcom{% endraw %}

{% raw %};com.allow_dcom = true{% endraw %}


{% raw %}; autoregister constants of a component's typlib on com_load(){% endraw %}

{% raw %}; http://php.net/com.autoregister-typelib{% endraw %}

{% raw %};com.autoregister_typelib = true{% endraw %}


{% raw %}; register constants casesensitive{% endraw %}

{% raw %}; http://php.net/com.autoregister-casesensitive{% endraw %}

{% raw %};com.autoregister_casesensitive = false{% endraw %}


{% raw %}; show warnings on duplicate constant registrations{% endraw %}

{% raw %}; http://php.net/com.autoregister-verbose{% endraw %}

{% raw %};com.autoregister_verbose = true{% endraw %}


{% raw %}; The default character set code-page to use when passing strings to and from COM objects.{% endraw %}

{% raw %}; Default: system ANSI code page{% endraw %}

{% raw %};com.code_page={% endraw %}


[mbstring]
{% raw %}; language for internal character representation.{% endraw %}

{% raw %}; This affects mb_send_mail() and mbstring.detect_order.{% endraw %}

{% raw %}; http://php.net/mbstring.language{% endraw %}

{% raw %};mbstring.language = Japanese{% endraw %}


{% raw %}; Use of this INI entry is deprecated, use global internal_encoding instead.{% endraw %}

{% raw %}; internal/script encoding.{% endraw %}

{% raw %}; Some encoding cannot work as internal encoding. (e.g. SJIS, BIG5, ISO-2022-*){% endraw %}

{% raw %}; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.{% endraw %}

{% raw %}; The precedence is: default_charset < internal_encoding < iconv.internal_encoding{% endraw %}

{% raw %};mbstring.internal_encoding ={% endraw %}


{% raw %}; Use of this INI entry is deprecated, use global input_encoding instead.{% endraw %}

{% raw %}; http input encoding.{% endraw %}

{% raw %}; mbstring.encoding_translation = On is needed to use this setting.{% endraw %}

{% raw %}; If empty, default_charset or input_encoding or mbstring.input is used.{% endraw %}

{% raw %}; The precedence is: default_charset < input_encoding < mbsting.http_input{% endraw %}

{% raw %}; http://php.net/mbstring.http-input{% endraw %}

{% raw %};mbstring.http_input ={% endraw %}


{% raw %}; Use of this INI entry is deprecated, use global output_encoding instead.{% endraw %}

{% raw %}; http output encoding.{% endraw %}

{% raw %}; mb_output_handler must be registered as output buffer to function.{% endraw %}

{% raw %}; If empty, default_charset or output_encoding or mbstring.http_output is used.{% endraw %}

{% raw %}; The precedence is: default_charset < output_encoding < mbstring.http_output{% endraw %}

{% raw %}; To use an output encoding conversion, mbstring's output handler must be set{% endraw %}

{% raw %}; otherwise output encoding conversion cannot be performed.{% endraw %}

{% raw %}; http://php.net/mbstring.http-output{% endraw %}

{% raw %};mbstring.http_output ={% endraw %}


{% raw %}; enable automatic encoding translation according to{% endraw %}

{% raw %}; mbstring.internal_encoding setting. Input chars are{% endraw %}

{% raw %}; converted to internal encoding by setting this to On.{% endraw %}

{% raw %}; Note: Do _not_ use automatic encoding translation for{% endraw %}

{% raw %};       portable libs/applications.{% endraw %}

{% raw %}; http://php.net/mbstring.encoding-translation{% endraw %}

{% raw %};mbstring.encoding_translation = Off{% endraw %}


{% raw %}; automatic encoding detection order.{% endraw %}

{% raw %}; "auto" detect order is changed according to mbstring.language{% endraw %}

{% raw %}; http://php.net/mbstring.detect-order{% endraw %}

{% raw %};mbstring.detect_order = auto{% endraw %}


{% raw %}; substitute_character used when character cannot be converted{% endraw %}

{% raw %}; one from another{% endraw %}

{% raw %}; http://php.net/mbstring.substitute-character{% endraw %}

{% raw %};mbstring.substitute_character = none{% endraw %}


{% raw %}; overload(replace) single byte functions by mbstring functions.{% endraw %}

{% raw %}; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),{% endraw %}

{% raw %}; etc. Possible values are 0,1,2,4 or combination of them.{% endraw %}

{% raw %}; For example, 7 for overload everything.{% endraw %}

{% raw %}; 0: No overload{% endraw %}

{% raw %}; 1: Overload mail() function{% endraw %}

{% raw %}; 2: Overload str*() functions{% endraw %}

{% raw %}; 4: Overload ereg*() functions{% endraw %}

{% raw %}; http://php.net/mbstring.func-overload{% endraw %}

{% raw %};mbstring.func_overload = 0{% endraw %}


{% raw %}; enable strict encoding detection.{% endraw %}

{% raw %}; Default: Off{% endraw %}

{% raw %};mbstring.strict_detection = On{% endraw %}


{% raw %}; This directive specifies the regex pattern of content types for which mb_output_handler(){% endraw %}

{% raw %}; is activated.{% endraw %}

{% raw %}; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\+xml){% endraw %}

{% raw %};mbstring.http_output_conv_mimetype={% endraw %}


{% raw %}; This directive specifies maximum stack depth for mbstring regular expressions. It is similar{% endraw %}

{% raw %}; to the pcre.recursion_limit for PCRE.{% endraw %}

{% raw %}; Default: 100000{% endraw %}

{% raw %};mbstring.regex_stack_limit=100000{% endraw %}


{% raw %}; This directive specifies maximum retry count for mbstring regular expressions. It is similar{% endraw %}

{% raw %}; to the pcre.backtrack_limit for PCRE.{% endraw %}

{% raw %}; Default: 1000000{% endraw %}

{% raw %};mbstring.regex_retry_limit=1000000{% endraw %}


[gd]
{% raw %}; Tell the jpeg decode to ignore warnings and try to create{% endraw %}

{% raw %}; a gd image. The warning will then be displayed as notices{% endraw %}

{% raw %}; disabled by default{% endraw %}

{% raw %}; http://php.net/gd.jpeg-ignore-warning{% endraw %}

{% raw %};gd.jpeg_ignore_warning = 1{% endraw %}


[exif]
{% raw %}; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.{% endraw %}

{% raw %}; With mbstring support this will automatically be converted into the encoding{% endraw %}

{% raw %}; given by corresponding encode setting. When empty mbstring.internal_encoding{% endraw %}

{% raw %}; is used. For the decode settings you can distinguish between motorola and{% endraw %}

{% raw %}; intel byte order. A decode setting cannot be empty.{% endraw %}

{% raw %}; http://php.net/exif.encode-unicode{% endraw %}

{% raw %};exif.encode_unicode = ISO-8859-15{% endraw %}


{% raw %}; http://php.net/exif.decode-unicode-motorola{% endraw %}

{% raw %};exif.decode_unicode_motorola = UCS-2BE{% endraw %}


{% raw %}; http://php.net/exif.decode-unicode-intel{% endraw %}

{% raw %};exif.decode_unicode_intel    = UCS-2LE{% endraw %}


{% raw %}; http://php.net/exif.encode-jis{% endraw %}

{% raw %};exif.encode_jis ={% endraw %}


{% raw %}; http://php.net/exif.decode-jis-motorola{% endraw %}

{% raw %};exif.decode_jis_motorola = JIS{% endraw %}


{% raw %}; http://php.net/exif.decode-jis-intel{% endraw %}

{% raw %};exif.decode_jis_intel    = JIS{% endraw %}


[Tidy]
{% raw %}; The path to a default tidy configuration file to use when using tidy{% endraw %}

{% raw %}; http://php.net/tidy.default-config{% endraw %}

{% raw %};tidy.default_config = /usr/local/lib/php/default.tcfg{% endraw %}


{% raw %}; Should tidy clean and repair output automatically?{% endraw %}

{% raw %}; WARNING: Do not use this option if you are generating non-html content{% endraw %}

{% raw %}; such as dynamic images{% endraw %}

{% raw %}; http://php.net/tidy.clean-output{% endraw %}

tidy.clean_output = Off

[soap]
{% raw %}; Enables or disables WSDL caching feature.{% endraw %}

{% raw %}; http://php.net/soap.wsdl-cache-enabled{% endraw %}

soap.wsdl_cache_enabled=1

{% raw %}; Sets the directory name where SOAP extension will put cache files.{% endraw %}

{% raw %}; http://php.net/soap.wsdl-cache-dir{% endraw %}

soap.wsdl_cache_dir="/tmp"

{% raw %}; (time to live) Sets the number of second while cached file will be used{% endraw %}

{% raw %}; instead of original one.{% endraw %}

{% raw %}; http://php.net/soap.wsdl-cache-ttl{% endraw %}

soap.wsdl_cache_ttl=86400

{% raw %}; Sets the size of the cache limit. (Max. number of WSDL files to cache){% endraw %}

soap.wsdl_cache_limit = 5

[sysvshm]
{% raw %}; A default size of the shared memory segment{% endraw %}

{% raw %};sysvshm.init_mem = 10000{% endraw %}


[ldap]
{% raw %}; Sets the maximum number of open links or -1 for unlimited.{% endraw %}

ldap.max_links = -1

[dba]
{% raw %};dba.default_handler={% endraw %}


[opcache]
{% raw %}; Determines if Zend OPCache is enabled{% endraw %}

{% raw %};opcache.enable=1{% endraw %}


{% raw %}; Determines if Zend OPCache is enabled for the CLI version of PHP{% endraw %}

{% raw %};opcache.enable_cli=0{% endraw %}


{% raw %}; The OPcache shared memory storage size.{% endraw %}

{% raw %};opcache.memory_consumption=128{% endraw %}


{% raw %}; The amount of memory for interned strings in Mbytes.{% endraw %}

{% raw %};opcache.interned_strings_buffer=8{% endraw %}


{% raw %}; The maximum number of keys (scripts) in the OPcache hash table.{% endraw %}

{% raw %}; Only numbers between 200 and 1000000 are allowed.{% endraw %}

{% raw %};opcache.max_accelerated_files=10000{% endraw %}


{% raw %}; The maximum percentage of "wasted" memory until a restart is scheduled.{% endraw %}

{% raw %};opcache.max_wasted_percentage=5{% endraw %}


{% raw %}; When this directive is enabled, the OPcache appends the current working{% endraw %}

{% raw %}; directory to the script key, thus eliminating possible collisions between{% endraw %}

{% raw %}; files with the same name (basename). Disabling the directive improves{% endraw %}

{% raw %}; performance, but may break existing applications.{% endraw %}

{% raw %};opcache.use_cwd=1{% endraw %}


{% raw %}; When disabled, you must reset the OPcache manually or restart the{% endraw %}

{% raw %}; webserver for changes to the filesystem to take effect.{% endraw %}

{% raw %};opcache.validate_timestamps=1{% endraw %}


{% raw %}; How often (in seconds) to check file timestamps for changes to the shared{% endraw %}

{% raw %}; memory storage allocation. ("1" means validate once per second, but only{% endraw %}

{% raw %}; once per request. "0" means always validate){% endraw %}

{% raw %};opcache.revalidate_freq=2{% endraw %}


{% raw %}; Enables or disables file search in include_path optimization{% endraw %}

{% raw %};opcache.revalidate_path=0{% endraw %}


{% raw %}; If disabled, all PHPDoc comments are dropped from the code to reduce the{% endraw %}

{% raw %}; size of the optimized code.{% endraw %}

{% raw %};opcache.save_comments=1{% endraw %}


{% raw %}; Allow file existence override (file_exists, etc.) performance feature.{% endraw %}

{% raw %};opcache.enable_file_override=0{% endraw %}


{% raw %}; A bitmask, where each bit enables or disables the appropriate OPcache{% endraw %}

{% raw %}; passes{% endraw %}

{% raw %};opcache.optimization_level=0x7FFFBFFF{% endraw %}


{% raw %};opcache.dups_fix=0{% endraw %}


{% raw %}; The location of the OPcache blacklist file (wildcards allowed).{% endraw %}

{% raw %}; Each OPcache blacklist file is a text file that holds the names of files{% endraw %}

{% raw %}; that should not be accelerated. The file format is to add each filename{% endraw %}

{% raw %}; to a new line. The filename may be a full path or just a file prefix{% endraw %}

{% raw %}; (i.e., /var/www/x  blacklists all the files and directories in /var/www{% endraw %}

{% raw %}; that start with 'x'). Line starting with a ; are ignored (comments).{% endraw %}

{% raw %};opcache.blacklist_filename={% endraw %}


{% raw %}; Allows exclusion of large files from being cached. By default all files{% endraw %}

{% raw %}; are cached.{% endraw %}

{% raw %};opcache.max_file_size=0{% endraw %}


{% raw %}; Check the cache checksum each N requests.{% endraw %}

{% raw %}; The default value of "0" means that the checks are disabled.{% endraw %}

{% raw %};opcache.consistency_checks=0{% endraw %}


{% raw %}; How long to wait (in seconds) for a scheduled restart to begin if the cache{% endraw %}

{% raw %}; is not being accessed.{% endraw %}

{% raw %};opcache.force_restart_timeout=180{% endraw %}


{% raw %}; OPcache error_log file name. Empty string assumes "stderr".{% endraw %}

{% raw %};opcache.error_log={% endraw %}


{% raw %}; All OPcache errors go to the Web server log.{% endraw %}

{% raw %}; By default, only fatal errors (level 0) or errors (level 1) are logged.{% endraw %}

{% raw %}; You can also enable warnings (level 2), info messages (level 3) or{% endraw %}

{% raw %}; debug messages (level 4).{% endraw %}

{% raw %};opcache.log_verbosity_level=1{% endraw %}


{% raw %}; Preferred Shared Memory back-end. Leave empty and let the system decide.{% endraw %}

{% raw %};opcache.preferred_memory_model={% endraw %}


{% raw %}; Protect the shared memory from unexpected writing during script execution.{% endraw %}

{% raw %}; Useful for internal debugging only.{% endraw %}

{% raw %};opcache.protect_memory=0{% endraw %}


{% raw %}; Allows calling OPcache API functions only from PHP scripts which path is{% endraw %}

{% raw %}; started from specified string. The default "" means no restriction{% endraw %}

{% raw %};opcache.restrict_api={% endraw %}


{% raw %}; Mapping base of shared memory segments (for Windows only). All the PHP{% endraw %}

{% raw %}; processes have to map shared memory into the same address space. This{% endraw %}

{% raw %}; directive allows to manually fix the "Unable to reattach to base address"{% endraw %}

{% raw %}; errors.{% endraw %}

{% raw %};opcache.mmap_base={% endraw %}


{% raw %}; Facilitates multiple OPcache instances per user (for Windows only). All PHP{% endraw %}

{% raw %}; processes with the same cache ID and user share an OPcache instance.{% endraw %}

{% raw %};opcache.cache_id={% endraw %}


{% raw %}; Enables and sets the second level cache directory.{% endraw %}

{% raw %}; It should improve performance when SHM memory is full, at server restart or{% endraw %}

{% raw %}; SHM reset. The default "" disables file based caching.{% endraw %}

{% raw %};opcache.file_cache={% endraw %}


{% raw %}; Enables or disables opcode caching in shared memory.{% endraw %}

{% raw %};opcache.file_cache_only=0{% endraw %}


{% raw %}; Enables or disables checksum validation when script loaded from file cache.{% endraw %}

{% raw %};opcache.file_cache_consistency_checks=1{% endraw %}


{% raw %}; Implies opcache.file_cache_only=1 for a certain process that failed to{% endraw %}

{% raw %}; reattach to the shared memory (for Windows only). Explicitly enabled file{% endraw %}

{% raw %}; cache is required.{% endraw %}

{% raw %};opcache.file_cache_fallback=1{% endraw %}


{% raw %}; Enables or disables copying of PHP code (text segment) into HUGE PAGES.{% endraw %}

{% raw %}; This should improve performance, but requires appropriate OS configuration.{% endraw %}

{% raw %};opcache.huge_code_pages=1{% endraw %}


{% raw %}; Validate cached file permissions.{% endraw %}

{% raw %};opcache.validate_permission=0{% endraw %}


{% raw %}; Prevent name collisions in chroot'ed environment.{% endraw %}

{% raw %};opcache.validate_root=0{% endraw %}


{% raw %}; If specified, it produces opcode dumps for debugging different stages of{% endraw %}

{% raw %}; optimizations.{% endraw %}

{% raw %};opcache.opt_debug_level=0{% endraw %}


{% raw %}; Specifies a PHP script that is going to be compiled and executed at server{% endraw %}

{% raw %}; start-up.{% endraw %}

{% raw %}; http://php.net/opcache.preload{% endraw %}

{% raw %};opcache.preload={% endraw %}


{% raw %}; Preloading code as root is not allowed for security reasons. This directive{% endraw %}

{% raw %}; facilitates to let the preloading to be run as another user.{% endraw %}

{% raw %}; http://php.net/opcache.preload_user{% endraw %}

{% raw %};opcache.preload_user={% endraw %}


{% raw %}; Prevents caching files that are less than this number of seconds old. It{% endraw %}

{% raw %}; protects from caching of incompletely updated files. In case all file updates{% endraw %}

{% raw %}; on your site are atomic, you may increase performance by setting it to "0".{% endraw %}

{% raw %};opcache.file_update_protection=2{% endraw %}


{% raw %}; Absolute path used to store shared lockfiles (for *nix only).{% endraw %}

{% raw %};opcache.lockfile_path=/tmp{% endraw %}


[curl]
{% raw %}; A default value for the CURLOPT_CAINFO option. This is required to be an{% endraw %}

{% raw %}; absolute path.{% endraw %}

{% raw %};curl.cainfo ={% endraw %}


[openssl]
{% raw %}; The location of a Certificate Authority (CA) file on the local filesystem{% endraw %}

{% raw %}; to use when verifying the identity of SSL/TLS peers. Most users should{% endraw %}

{% raw %}; not specify a value for this directive as PHP will attempt to use the{% endraw %}

{% raw %}; OS-managed cert stores in its absence. If specified, this value may still{% endraw %}

{% raw %}; be overridden on a per-stream basis via the "cafile" SSL stream context{% endraw %}

{% raw %}; option.{% endraw %}

{% raw %};openssl.cafile={% endraw %}


{% raw %}; If openssl.cafile is not specified or if the CA file is not found, the{% endraw %}

{% raw %}; directory pointed to by openssl.capath is searched for a suitable{% endraw %}

{% raw %}; certificate. This value must be a correctly hashed certificate directory.{% endraw %}

{% raw %}; Most users should not specify a value for this directive as PHP will{% endraw %}

{% raw %}; attempt to use the OS-managed cert stores in its absence. If specified,{% endraw %}

{% raw %}; this value may still be overridden on a per-stream basis via the "capath"{% endraw %}

{% raw %}; SSL stream context option.{% endraw %}

{% raw %};openssl.capath={% endraw %}


[ffi]
{% raw %}; FFI API restriction. Possible values:{% endraw %}

{% raw %}; "preload" - enabled in CLI scripts and preloaded files (default){% endraw %}

{% raw %}; "false"   - always disabled{% endraw %}

{% raw %}; "true"    - always enabled{% endraw %}

{% raw %};ffi.enable=preload{% endraw %}


{% raw %}; List of headers files to preload, wildcard patterns allowed.{% endraw %}

{% raw %};ffi.preload={% endraw %}

